{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"18DzxU4PhEeHlu4fR7lee5enNHIoTgTsW","timestamp":1706196787462},{"file_id":"11_CRMAUczU4zxJJZYn8WctFN87q7fSpL","timestamp":1704507784927}],"gpuType":"T4","collapsed_sections":["jQ-pP5XBbFlt","1SzMvpvrbc0H","tnoMYzADD8zU","9HHyVBshGlxA","YRvfNte1Gp2i"],"toc_visible":true,"mount_file_id":"11_CRMAUczU4zxJJZYn8WctFN87q7fSpL","authorship_tag":"ABX9TyMuCa09I6asoziPvIcztkLC"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["#Preparation"],"metadata":{"id":"SGsQ_2MJDo5f"}},{"cell_type":"markdown","source":["##Installer"],"metadata":{"id":"4mt2Fn102knN"}},{"cell_type":"code","source":["import pandas as pd\n","import re\n","import numpy as np\n","import itertools"],"metadata":{"id":"fWphL7BeuNB_","executionInfo":{"status":"ok","timestamp":1706227351735,"user_tz":-420,"elapsed":1994,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":["##Dataset"],"metadata":{"id":"VJoT3jJF2pOc"}},{"cell_type":"code","source":["dir = '/content/switzerland.data'"],"metadata":{"id":"tHDz3GwO2twX","executionInfo":{"status":"ok","timestamp":1706227351736,"user_tz":-420,"elapsed":17,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["with open(dir, encoding='Latin1') as file:\n","  lines = [line.strip() for line in file]"],"metadata":{"id":"BibUkccU2zCe","executionInfo":{"status":"ok","timestamp":1706227351736,"user_tz":-420,"elapsed":17,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["lines[0:10]"],"metadata":{"id":"Ju5k2H1e3ZAg","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1706227351736,"user_tz":-420,"elapsed":16,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"afa5a97b-40db-4990-d471-1de26b3c467f"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['3001 0 65 1 1 1 1',\n"," '-9 4 115 0 0 -9 -9 -9',\n"," '0 -9 -9 0 1 9 85 0',\n"," '1 1 0 1 12 8.3 -9 100',\n"," '93 56 185 80 115 70 1 0',\n"," '0 2 -9 -9 -9 -9 -9 -9',\n"," '-9 -9 -9 7 -9 -9 -9 1',\n"," '11 85 1 1 2 1 1 1',\n"," '1 1 1 1 1 1 1 1',\n"," '1 1 75 -9. name']"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["data = itertools.takewhile(\n","  lambda x: len(x) == 76,\n","  (' '.join(lines[i:(i + 10)]).split() for i in range(0, len(lines), 10))\n",")\n","\n","df = pd.DataFrame.from_records(data)\n","\n","df.head()"],"metadata":{"id":"sfZcnvrgtbU9","colab":{"base_uri":"https://localhost:8080/","height":235},"executionInfo":{"status":"ok","timestamp":1706227351736,"user_tz":-420,"elapsed":16,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"da226f8a-ef6f-426d-a12f-75c29d5bd4e4"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     0  1   2  3  4  5  6   7  8    9   ... 66 67 68 69 70 71 72  73   74  \\\n","0  3001  0  65  1  1  1  1  -9  4  115  ...  1  1  1  1  1  1  1  75  -9.   \n","1  3002  0  32  1  0  0  0  -9  1   95  ...  1  1  1  1  1  5  1  63  -9.   \n","2  3003  0  61  1  1  1  1  -9  4  105  ...  2  1  1  1  1  1  1  67  -9.   \n","3  3004  0  50  1  1  1  1  -9  4  145  ...  1  1  1  1  1  5  4  36  -9.   \n","4  3005  0  57  1  1  1  1  -9  4  110  ...  2  1  1  1  1  1  1  60  -9.   \n","\n","     75  \n","0  name  \n","1  name  \n","2  name  \n","3  name  \n","4  name  \n","\n","[5 rows x 76 columns]"],"text/html":["\n","  <div id=\"df-7ed5436d-f55f-48fc-88c8-1e637511c43f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>9</th>\n","      <th>...</th>\n","      <th>66</th>\n","      <th>67</th>\n","      <th>68</th>\n","      <th>69</th>\n","      <th>70</th>\n","      <th>71</th>\n","      <th>72</th>\n","      <th>73</th>\n","      <th>74</th>\n","      <th>75</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3001</td>\n","      <td>0</td>\n","      <td>65</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>-9</td>\n","      <td>4</td>\n","      <td>115</td>\n","      <td>...</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>75</td>\n","      <td>-9.</td>\n","      <td>name</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>3002</td>\n","      <td>0</td>\n","      <td>32</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>-9</td>\n","      <td>1</td>\n","      <td>95</td>\n","      <td>...</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>63</td>\n","      <td>-9.</td>\n","      <td>name</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3003</td>\n","      <td>0</td>\n","      <td>61</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>-9</td>\n","      <td>4</td>\n","      <td>105</td>\n","      <td>...</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>67</td>\n","      <td>-9.</td>\n","      <td>name</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3004</td>\n","      <td>0</td>\n","      <td>50</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>-9</td>\n","      <td>4</td>\n","      <td>145</td>\n","      <td>...</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>36</td>\n","      <td>-9.</td>\n","      <td>name</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3005</td>\n","      <td>0</td>\n","      <td>57</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>-9</td>\n","      <td>4</td>\n","      <td>110</td>\n","      <td>...</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>60</td>\n","      <td>-9.</td>\n","      <td>name</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows Ã— 76 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7ed5436d-f55f-48fc-88c8-1e637511c43f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-7ed5436d-f55f-48fc-88c8-1e637511c43f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-7ed5436d-f55f-48fc-88c8-1e637511c43f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-fb94f0a5-bc77-44f3-874a-800d9c02721d\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fb94f0a5-bc77-44f3-874a-800d9c02721d')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-fb94f0a5-bc77-44f3-874a-800d9c02721d button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","execution_count":6,"metadata":{"id":"5FkMJvndtVuA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1706227351736,"user_tz":-420,"elapsed":15,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"daa15ee8-c634-4054-eaed-8ff0a3919702"},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 123 entries, 0 to 122\n","Data columns (total 76 columns):\n"," #   Column  Non-Null Count  Dtype \n","---  ------  --------------  ----- \n"," 0   0       123 non-null    object\n"," 1   1       123 non-null    object\n"," 2   2       123 non-null    object\n"," 3   3       123 non-null    object\n"," 4   4       123 non-null    object\n"," 5   5       123 non-null    object\n"," 6   6       123 non-null    object\n"," 7   7       123 non-null    object\n"," 8   8       123 non-null    object\n"," 9   9       123 non-null    object\n"," 10  10      123 non-null    object\n"," 11  11      123 non-null    object\n"," 12  12      123 non-null    object\n"," 13  13      123 non-null    object\n"," 14  14      123 non-null    object\n"," 15  15      123 non-null    object\n"," 16  16      123 non-null    object\n"," 17  17      123 non-null    object\n"," 18  18      123 non-null    object\n"," 19  19      123 non-null    object\n"," 20  20      123 non-null    object\n"," 21  21      123 non-null    object\n"," 22  22      123 non-null    object\n"," 23  23      123 non-null    object\n"," 24  24      123 non-null    object\n"," 25  25      123 non-null    object\n"," 26  26      123 non-null    object\n"," 27  27      123 non-null    object\n"," 28  28      123 non-null    object\n"," 29  29      123 non-null    object\n"," 30  30      123 non-null    object\n"," 31  31      123 non-null    object\n"," 32  32      123 non-null    object\n"," 33  33      123 non-null    object\n"," 34  34      123 non-null    object\n"," 35  35      123 non-null    object\n"," 36  36      123 non-null    object\n"," 37  37      123 non-null    object\n"," 38  38      123 non-null    object\n"," 39  39      123 non-null    object\n"," 40  40      123 non-null    object\n"," 41  41      123 non-null    object\n"," 42  42      123 non-null    object\n"," 43  43      123 non-null    object\n"," 44  44      123 non-null    object\n"," 45  45      123 non-null    object\n"," 46  46      123 non-null    object\n"," 47  47      123 non-null    object\n"," 48  48      123 non-null    object\n"," 49  49      123 non-null    object\n"," 50  50      123 non-null    object\n"," 51  51      123 non-null    object\n"," 52  52      123 non-null    object\n"," 53  53      123 non-null    object\n"," 54  54      123 non-null    object\n"," 55  55      123 non-null    object\n"," 56  56      123 non-null    object\n"," 57  57      123 non-null    object\n"," 58  58      123 non-null    object\n"," 59  59      123 non-null    object\n"," 60  60      123 non-null    object\n"," 61  61      123 non-null    object\n"," 62  62      123 non-null    object\n"," 63  63      123 non-null    object\n"," 64  64      123 non-null    object\n"," 65  65      123 non-null    object\n"," 66  66      123 non-null    object\n"," 67  67      123 non-null    object\n"," 68  68      123 non-null    object\n"," 69  69      123 non-null    object\n"," 70  70      123 non-null    object\n"," 71  71      123 non-null    object\n"," 72  72      123 non-null    object\n"," 73  73      123 non-null    object\n"," 74  74      123 non-null    object\n"," 75  75      123 non-null    object\n","dtypes: object(76)\n","memory usage: 73.2+ KB\n"]}],"source":["df.info()"]},{"cell_type":"code","source":["df = df.iloc[:,:-1]\n","df = df.drop(df.columns[0], axis=1)"],"metadata":{"id":"VpTjrJ4YVBFn","executionInfo":{"status":"ok","timestamp":1706227351736,"user_tz":-420,"elapsed":13,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["df = df.astype(float)"],"metadata":{"id":"3nRbCmI6a9Xm","executionInfo":{"status":"ok","timestamp":1706227351736,"user_tz":-420,"elapsed":13,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"idq3RzKVVDrb","executionInfo":{"status":"ok","timestamp":1706227351736,"user_tz":-420,"elapsed":13,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"2910f9ab-c0a3-42ba-b7ae-c2862f82e6b3"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 123 entries, 0 to 122\n","Data columns (total 74 columns):\n"," #   Column  Non-Null Count  Dtype  \n","---  ------  --------------  -----  \n"," 0   1       123 non-null    float64\n"," 1   2       123 non-null    float64\n"," 2   3       123 non-null    float64\n"," 3   4       123 non-null    float64\n"," 4   5       123 non-null    float64\n"," 5   6       123 non-null    float64\n"," 6   7       123 non-null    float64\n"," 7   8       123 non-null    float64\n"," 8   9       123 non-null    float64\n"," 9   10      123 non-null    float64\n"," 10  11      123 non-null    float64\n"," 11  12      123 non-null    float64\n"," 12  13      123 non-null    float64\n"," 13  14      123 non-null    float64\n"," 14  15      123 non-null    float64\n"," 15  16      123 non-null    float64\n"," 16  17      123 non-null    float64\n"," 17  18      123 non-null    float64\n"," 18  19      123 non-null    float64\n"," 19  20      123 non-null    float64\n"," 20  21      123 non-null    float64\n"," 21  22      123 non-null    float64\n"," 22  23      123 non-null    float64\n"," 23  24      123 non-null    float64\n"," 24  25      123 non-null    float64\n"," 25  26      123 non-null    float64\n"," 26  27      123 non-null    float64\n"," 27  28      123 non-null    float64\n"," 28  29      123 non-null    float64\n"," 29  30      123 non-null    float64\n"," 30  31      123 non-null    float64\n"," 31  32      123 non-null    float64\n"," 32  33      123 non-null    float64\n"," 33  34      123 non-null    float64\n"," 34  35      123 non-null    float64\n"," 35  36      123 non-null    float64\n"," 36  37      123 non-null    float64\n"," 37  38      123 non-null    float64\n"," 38  39      123 non-null    float64\n"," 39  40      123 non-null    float64\n"," 40  41      123 non-null    float64\n"," 41  42      123 non-null    float64\n"," 42  43      123 non-null    float64\n"," 43  44      123 non-null    float64\n"," 44  45      123 non-null    float64\n"," 45  46      123 non-null    float64\n"," 46  47      123 non-null    float64\n"," 47  48      123 non-null    float64\n"," 48  49      123 non-null    float64\n"," 49  50      123 non-null    float64\n"," 50  51      123 non-null    float64\n"," 51  52      123 non-null    float64\n"," 52  53      123 non-null    float64\n"," 53  54      123 non-null    float64\n"," 54  55      123 non-null    float64\n"," 55  56      123 non-null    float64\n"," 56  57      123 non-null    float64\n"," 57  58      123 non-null    float64\n"," 58  59      123 non-null    float64\n"," 59  60      123 non-null    float64\n"," 60  61      123 non-null    float64\n"," 61  62      123 non-null    float64\n"," 62  63      123 non-null    float64\n"," 63  64      123 non-null    float64\n"," 64  65      123 non-null    float64\n"," 65  66      123 non-null    float64\n"," 66  67      123 non-null    float64\n"," 67  68      123 non-null    float64\n"," 68  69      123 non-null    float64\n"," 69  70      123 non-null    float64\n"," 70  71      123 non-null    float64\n"," 71  72      123 non-null    float64\n"," 72  73      123 non-null    float64\n"," 73  74      123 non-null    float64\n","dtypes: float64(74)\n","memory usage: 71.2 KB\n"]}]},{"cell_type":"markdown","source":["#Validasi Data"],"metadata":{"id":"jQ-pP5XBbFlt"}},{"cell_type":"code","source":["df.replace(-9.0, np.nan, inplace=True)"],"metadata":{"id":"KyW976etbDWr","executionInfo":{"status":"ok","timestamp":1706227351737,"user_tz":-420,"elapsed":12,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["df.isnull().sum()"],"metadata":{"id":"VDNNgyXVbVg_","executionInfo":{"status":"ok","timestamp":1706227351737,"user_tz":-420,"elapsed":12,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"b7154442-a943-4866-cec7-6191aa29ae49"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1       0\n","2       0\n","3       0\n","4       0\n","5       0\n","     ... \n","70     17\n","71     17\n","72     13\n","73     17\n","74    123\n","Length: 74, dtype: int64"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["df.head()"],"metadata":{"id":"RJ9WOKxCbXfz","executionInfo":{"status":"ok","timestamp":1706227351737,"user_tz":-420,"elapsed":10,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"colab":{"base_uri":"https://localhost:8080/","height":0},"outputId":"a8e5d810-a4b1-49b0-b5a3-823e04415215"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    1     2    3    4    5    6   7    8      9    10  ...   65   66   67  \\\n","0  0.0  65.0  1.0  1.0  1.0  1.0 NaN  4.0  115.0  0.0  ...  1.0  1.0  1.0   \n","1  0.0  32.0  1.0  0.0  0.0  0.0 NaN  1.0   95.0  1.0  ...  1.0  1.0  1.0   \n","2  0.0  61.0  1.0  1.0  1.0  1.0 NaN  4.0  105.0  0.0  ...  1.0  2.0  1.0   \n","3  0.0  50.0  1.0  1.0  1.0  1.0 NaN  4.0  145.0  0.0  ...  1.0  1.0  1.0   \n","4  0.0  57.0  1.0  1.0  1.0  1.0 NaN  4.0  110.0  0.0  ...  1.0  2.0  1.0   \n","\n","    68   69   70   71   72    73  74  \n","0  1.0  1.0  1.0  1.0  1.0  75.0 NaN  \n","1  1.0  1.0  1.0  5.0  1.0  63.0 NaN  \n","2  1.0  1.0  1.0  1.0  1.0  67.0 NaN  \n","3  1.0  1.0  1.0  5.0  4.0  36.0 NaN  \n","4  1.0  1.0  1.0  1.0  1.0  60.0 NaN  \n","\n","[5 rows x 74 columns]"],"text/html":["\n","  <div id=\"df-93e2a469-29ec-4255-ba31-cd8d61f7741e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>9</th>\n","      <th>10</th>\n","      <th>...</th>\n","      <th>65</th>\n","      <th>66</th>\n","      <th>67</th>\n","      <th>68</th>\n","      <th>69</th>\n","      <th>70</th>\n","      <th>71</th>\n","      <th>72</th>\n","      <th>73</th>\n","      <th>74</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.0</td>\n","      <td>65.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","      <td>4.0</td>\n","      <td>115.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>75.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.0</td>\n","      <td>32.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>1.0</td>\n","      <td>95.0</td>\n","      <td>1.0</td>\n","      <td>...</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>5.0</td>\n","      <td>1.0</td>\n","      <td>63.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.0</td>\n","      <td>61.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","      <td>4.0</td>\n","      <td>105.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>67.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.0</td>\n","      <td>50.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","      <td>4.0</td>\n","      <td>145.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>5.0</td>\n","      <td>4.0</td>\n","      <td>36.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.0</td>\n","      <td>57.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","      <td>4.0</td>\n","      <td>110.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>60.0</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows Ã— 74 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-93e2a469-29ec-4255-ba31-cd8d61f7741e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-93e2a469-29ec-4255-ba31-cd8d61f7741e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-93e2a469-29ec-4255-ba31-cd8d61f7741e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-32b5f5eb-e9d0-49bf-b8a9-5a6e14e3c91c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-32b5f5eb-e9d0-49bf-b8a9-5a6e14e3c91c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-32b5f5eb-e9d0-49bf-b8a9-5a6e14e3c91c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["df.info()"],"metadata":{"id":"DKrpxmDhbZR3","executionInfo":{"status":"ok","timestamp":1706227351737,"user_tz":-420,"elapsed":9,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"ca20f4bd-de20-45ae-d879-5cd25eedbc5c"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 123 entries, 0 to 122\n","Data columns (total 74 columns):\n"," #   Column  Non-Null Count  Dtype  \n","---  ------  --------------  -----  \n"," 0   1       123 non-null    float64\n"," 1   2       123 non-null    float64\n"," 2   3       123 non-null    float64\n"," 3   4       123 non-null    float64\n"," 4   5       123 non-null    float64\n"," 5   6       123 non-null    float64\n"," 6   7       0 non-null      float64\n"," 7   8       123 non-null    float64\n"," 8   9       121 non-null    float64\n"," 9   10      93 non-null     float64\n"," 10  11      123 non-null    float64\n"," 11  12      23 non-null     float64\n"," 12  13      11 non-null     float64\n"," 13  14      2 non-null      float64\n"," 14  15      48 non-null     float64\n"," 15  16      8 non-null      float64\n"," 16  17      2 non-null      float64\n"," 17  18      122 non-null    float64\n"," 18  19      122 non-null    float64\n"," 19  20      122 non-null    float64\n"," 20  21      122 non-null    float64\n"," 21  22      118 non-null    float64\n"," 22  23      121 non-null    float64\n"," 23  24      120 non-null    float64\n"," 24  25      122 non-null    float64\n"," 25  26      117 non-null    float64\n"," 26  27      73 non-null     float64\n"," 27  28      122 non-null    float64\n"," 28  29      89 non-null     float64\n"," 29  30      73 non-null     float64\n"," 30  31      122 non-null    float64\n"," 31  32      122 non-null    float64\n"," 32  33      120 non-null    float64\n"," 33  34      120 non-null    float64\n"," 34  35      121 non-null    float64\n"," 35  36      121 non-null    float64\n"," 36  37      122 non-null    float64\n"," 37  38      120 non-null    float64\n"," 38  39      117 non-null    float64\n"," 39  40      106 non-null    float64\n"," 40  41      46 non-null     float64\n"," 41  42      46 non-null     float64\n"," 42  43      5 non-null      float64\n"," 43  44      0 non-null      float64\n"," 44  45      0 non-null      float64\n"," 45  46      0 non-null      float64\n"," 46  47      0 non-null      float64\n"," 47  48      0 non-null      float64\n"," 48  49      0 non-null      float64\n"," 49  50      73 non-null     float64\n"," 50  51      72 non-null     float64\n"," 51  52      26 non-null     float64\n"," 52  53      0 non-null      float64\n"," 53  54      114 non-null    float64\n"," 54  55      114 non-null    float64\n"," 55  56      114 non-null    float64\n"," 56  57      123 non-null    float64\n"," 57  58      123 non-null    float64\n"," 58  59      123 non-null    float64\n"," 59  60      123 non-null    float64\n"," 60  61      123 non-null    float64\n"," 61  62      123 non-null    float64\n"," 62  63      123 non-null    float64\n"," 63  64      123 non-null    float64\n"," 64  65      123 non-null    float64\n"," 65  66      123 non-null    float64\n"," 66  67      123 non-null    float64\n"," 67  68      106 non-null    float64\n"," 68  69      106 non-null    float64\n"," 69  70      106 non-null    float64\n"," 70  71      106 non-null    float64\n"," 71  72      110 non-null    float64\n"," 72  73      106 non-null    float64\n"," 73  74      0 non-null      float64\n","dtypes: float64(74)\n","memory usage: 71.2 KB\n"]}]},{"cell_type":"markdown","source":["#Menentukan Object Data"],"metadata":{"id":"1SzMvpvrbc0H"}},{"cell_type":"code","source":["df_selected = df.iloc[:, [1,2,7,8,10,14,17,30,36,38,39,42,49,56]]"],"metadata":{"id":"qm0xULF8bbcF","executionInfo":{"status":"ok","timestamp":1706227351737,"user_tz":-420,"elapsed":8,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["df_selected.head()"],"metadata":{"id":"k55NBWSpcnrd","executionInfo":{"status":"ok","timestamp":1706227352412,"user_tz":-420,"elapsed":683,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"colab":{"base_uri":"https://localhost:8080/","height":0},"outputId":"193cd79f-eccc-4861-dc27-1b41e7c33a11"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     2    3    8      9    11   15   18     31   37   39   40   43   50   57\n","0  65.0  1.0  4.0  115.0  0.0  0.0  0.0   93.0  1.0  0.0  2.0  NaN  7.0  1.0\n","1  32.0  1.0  1.0   95.0  0.0  NaN  0.0  127.0  0.0  0.7  1.0  NaN  NaN  1.0\n","2  61.0  1.0  4.0  105.0  0.0  NaN  0.0  110.0  1.0  1.5  1.0  NaN  NaN  1.0\n","3  50.0  1.0  4.0  145.0  0.0  NaN  0.0  139.0  1.0  0.7  2.0  NaN  NaN  1.0\n","4  57.0  1.0  4.0  110.0  0.0  NaN  1.0  131.0  1.0  1.4  1.0  1.0  NaN  3.0"],"text/html":["\n","  <div id=\"df-42cf5b20-173e-4cfc-a033-665927b8a2e5\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>8</th>\n","      <th>9</th>\n","      <th>11</th>\n","      <th>15</th>\n","      <th>18</th>\n","      <th>31</th>\n","      <th>37</th>\n","      <th>39</th>\n","      <th>40</th>\n","      <th>43</th>\n","      <th>50</th>\n","      <th>57</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>65.0</td>\n","      <td>1.0</td>\n","      <td>4.0</td>\n","      <td>115.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>93.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>2.0</td>\n","      <td>NaN</td>\n","      <td>7.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>32.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>95.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>127.0</td>\n","      <td>0.0</td>\n","      <td>0.7</td>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>61.0</td>\n","      <td>1.0</td>\n","      <td>4.0</td>\n","      <td>105.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>110.0</td>\n","      <td>1.0</td>\n","      <td>1.5</td>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>50.0</td>\n","      <td>1.0</td>\n","      <td>4.0</td>\n","      <td>145.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>139.0</td>\n","      <td>1.0</td>\n","      <td>0.7</td>\n","      <td>2.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>57.0</td>\n","      <td>1.0</td>\n","      <td>4.0</td>\n","      <td>110.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>1.0</td>\n","      <td>131.0</td>\n","      <td>1.0</td>\n","      <td>1.4</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","      <td>3.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-42cf5b20-173e-4cfc-a033-665927b8a2e5')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-42cf5b20-173e-4cfc-a033-665927b8a2e5 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-42cf5b20-173e-4cfc-a033-665927b8a2e5');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-049f999d-a1c3-4436-9ae9-303cb1827b78\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-049f999d-a1c3-4436-9ae9-303cb1827b78')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-049f999d-a1c3-4436-9ae9-303cb1827b78 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["df_selected.info()"],"metadata":{"id":"p78HKHcKcqfM","executionInfo":{"status":"ok","timestamp":1706227352413,"user_tz":-420,"elapsed":25,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"45bbf807-78df-4acd-efd8-b8c7d2e9d862"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 123 entries, 0 to 122\n","Data columns (total 14 columns):\n"," #   Column  Non-Null Count  Dtype  \n","---  ------  --------------  -----  \n"," 0   2       123 non-null    float64\n"," 1   3       123 non-null    float64\n"," 2   8       123 non-null    float64\n"," 3   9       121 non-null    float64\n"," 4   11      123 non-null    float64\n"," 5   15      48 non-null     float64\n"," 6   18      122 non-null    float64\n"," 7   31      122 non-null    float64\n"," 8   37      122 non-null    float64\n"," 9   39      117 non-null    float64\n"," 10  40      106 non-null    float64\n"," 11  43      5 non-null      float64\n"," 12  50      73 non-null     float64\n"," 13  57      123 non-null    float64\n","dtypes: float64(14)\n","memory usage: 13.6 KB\n"]}]},{"cell_type":"code","source":["column_mapping = {\n","  2: 'age',\n","  3: 'sex',\n","  8: 'cp',\n","  9: 'trestbps',\n","  11: 'chol',\n","  15: 'fbs',\n","  18: 'restecg',\n","  31: 'thalach',\n","  37: 'exang',\n","  39: 'oldpeak',\n","  40: 'slope',\n","  43: 'ca',\n","  50: 'thal',\n","  57: 'target'\n","}\n","df_selected.rename(columns=column_mapping, inplace=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vWz5j6MyVRm7","executionInfo":{"status":"ok","timestamp":1706227352413,"user_tz":-420,"elapsed":24,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"1d476c8e-01b4-48e6-bb79-7cc097e88e49"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-17-7edacf18f960>:17: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df_selected.rename(columns=column_mapping, inplace=True)\n"]}]},{"cell_type":"code","source":["df_selected.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-syFgtb6VUBu","executionInfo":{"status":"ok","timestamp":1706227352413,"user_tz":-420,"elapsed":23,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"5af50d09-722b-45b1-9a27-73bbe03a86d0"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 123 entries, 0 to 122\n","Data columns (total 14 columns):\n"," #   Column    Non-Null Count  Dtype  \n","---  ------    --------------  -----  \n"," 0   age       123 non-null    float64\n"," 1   sex       123 non-null    float64\n"," 2   cp        123 non-null    float64\n"," 3   trestbps  121 non-null    float64\n"," 4   chol      123 non-null    float64\n"," 5   fbs       48 non-null     float64\n"," 6   restecg   122 non-null    float64\n"," 7   thalach   122 non-null    float64\n"," 8   exang     122 non-null    float64\n"," 9   oldpeak   117 non-null    float64\n"," 10  slope     106 non-null    float64\n"," 11  ca        5 non-null      float64\n"," 12  thal      73 non-null     float64\n"," 13  target    123 non-null    float64\n","dtypes: float64(14)\n","memory usage: 13.6 KB\n"]}]},{"cell_type":"code","source":["df_selected.value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-1kgv-rBVWg_","executionInfo":{"status":"ok","timestamp":1706227352413,"user_tz":-420,"elapsed":23,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"602fbe61-7106-4360-ae33-0a8e988c7f86"},"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Series([], dtype: int64)"]},"metadata":{},"execution_count":19}]},{"cell_type":"markdown","source":["#Data Cleaning"],"metadata":{"id":"tnoMYzADD8zU"}},{"cell_type":"code","source":["df_selected.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jxfUqHC2VX1e","executionInfo":{"status":"ok","timestamp":1706227352413,"user_tz":-420,"elapsed":23,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"f494f363-fd53-4ee2-9766-3c7305bfe37d"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["age           0\n","sex           0\n","cp            0\n","trestbps      2\n","chol          0\n","fbs          75\n","restecg       1\n","thalach       1\n","exang         1\n","oldpeak       6\n","slope        17\n","ca          118\n","thal         50\n","target        0\n","dtype: int64"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["columns_to_drop = ['ca', 'slope','thal','chol']\n","df_selected = df_selected.drop(columns_to_drop, axis=1)\n","\n","df_selected.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GnqdWXShVZch","executionInfo":{"status":"ok","timestamp":1706227352413,"user_tz":-420,"elapsed":22,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"493af07c-1070-4eff-9291-9f021593855c"},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["age          0\n","sex          0\n","cp           0\n","trestbps     2\n","fbs         75\n","restecg      1\n","thalach      1\n","exang        1\n","oldpeak      6\n","target       0\n","dtype: int64"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["meanTBPS = df_selected['trestbps'].dropna()\n","#meanChol = df_selected['chol'].dropna()\n","meanfbs = df_selected['fbs'].dropna()\n","meanRestCG = df_selected['restecg'].dropna()\n","meanthalach = df_selected['thalach'].dropna()\n","meanexang = df_selected['exang'].dropna()\n","meanOldpeak = df_selected['oldpeak'].dropna()"],"metadata":{"id":"dHg0F2hXVdmN","executionInfo":{"status":"ok","timestamp":1706227352413,"user_tz":-420,"elapsed":21,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["meanTBPS = meanTBPS.astype(float)\n","#meanChol = meanChol.astype(float)\n","meanfbs = meanfbs.astype(float)\n","meanthalach = meanthalach.astype(float)\n","meanexang = meanexang.astype(float)\n","meanRestCG = meanRestCG.astype(float)\n","meanOldpeak = meanOldpeak.astype(float)"],"metadata":{"id":"tbdNNcnDVhJL","executionInfo":{"status":"ok","timestamp":1706227352413,"user_tz":-420,"elapsed":20,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["meanTBPS = round(meanTBPS.mean())\n","#meanChol = round(meanChol.mean())\n","meanfbs = round(meanfbs.mean())\n","meanthalach = round(meanthalach.mean())\n","meanexang = round(meanexang.mean())\n","meanRestCG = round(meanRestCG.mean())\n","meanOldpeak = round(meanOldpeak.mean())"],"metadata":{"id":"TishR7YaViz5","executionInfo":{"status":"ok","timestamp":1706227352414,"user_tz":-420,"elapsed":21,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["fill_values = {'trestbps': meanTBPS,\n","               #'chol': meanChol,\n","               'fbs': meanfbs,\n","               'thalach':meanthalach,\n","               'exang':meanexang,\n","               'restecg':meanRestCG,\n","               'oldpeak': meanOldpeak}\n","dfClean = df_selected.fillna(value=fill_values)"],"metadata":{"id":"F3464YvSVl4p","executionInfo":{"status":"ok","timestamp":1706227352414,"user_tz":-420,"elapsed":21,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["dfClean.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fTMZj5ApVo7I","executionInfo":{"status":"ok","timestamp":1706227352414,"user_tz":-420,"elapsed":21,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"07a27a66-5294-42d9-ede6-18d4bb224701"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 123 entries, 0 to 122\n","Data columns (total 10 columns):\n"," #   Column    Non-Null Count  Dtype  \n","---  ------    --------------  -----  \n"," 0   age       123 non-null    float64\n"," 1   sex       123 non-null    float64\n"," 2   cp        123 non-null    float64\n"," 3   trestbps  123 non-null    float64\n"," 4   fbs       123 non-null    float64\n"," 5   restecg   123 non-null    float64\n"," 6   thalach   123 non-null    float64\n"," 7   exang     123 non-null    float64\n"," 8   oldpeak   123 non-null    float64\n"," 9   target    123 non-null    float64\n","dtypes: float64(10)\n","memory usage: 9.7 KB\n"]}]},{"cell_type":"code","source":["dfClean.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YnNbX1rCVq16","executionInfo":{"status":"ok","timestamp":1706227352414,"user_tz":-420,"elapsed":20,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"2811b4ed-23e1-40f5-b61d-a7402ff8518b"},"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/plain":["age         0\n","sex         0\n","cp          0\n","trestbps    0\n","fbs         0\n","restecg     0\n","thalach     0\n","exang       0\n","oldpeak     0\n","target      0\n","dtype: int64"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["duplicate_rows = dfClean.duplicated()\n","dfClean[duplicate_rows]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":53},"id":"wnDIrkwQVsZt","executionInfo":{"status":"ok","timestamp":1706227352414,"user_tz":-420,"elapsed":19,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"fafa1213-dfe5-4cb8-9f3c-af3f086fe4d8"},"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Empty DataFrame\n","Columns: [age, sex, cp, trestbps, fbs, restecg, thalach, exang, oldpeak, target]\n","Index: []"],"text/html":["\n","  <div id=\"df-b88b78a8-cc01-4900-96bb-d18b50ce4564\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>sex</th>\n","      <th>cp</th>\n","      <th>trestbps</th>\n","      <th>fbs</th>\n","      <th>restecg</th>\n","      <th>thalach</th>\n","      <th>exang</th>\n","      <th>oldpeak</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b88b78a8-cc01-4900-96bb-d18b50ce4564')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b88b78a8-cc01-4900-96bb-d18b50ce4564 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b88b78a8-cc01-4900-96bb-d18b50ce4564');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["print(\"All Duplicate Rows:\")\n","dfClean[dfClean.duplicated(keep=False)]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":70},"id":"IQmqutYqVtuz","executionInfo":{"status":"ok","timestamp":1706227352414,"user_tz":-420,"elapsed":18,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"3c399b6b-32ee-41c5-f60f-21a27ea0064b"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["All Duplicate Rows:\n"]},{"output_type":"execute_result","data":{"text/plain":["Empty DataFrame\n","Columns: [age, sex, cp, trestbps, fbs, restecg, thalach, exang, oldpeak, target]\n","Index: []"],"text/html":["\n","  <div id=\"df-4683eb68-eb6c-47b0-a83a-87edffecfb18\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>sex</th>\n","      <th>cp</th>\n","      <th>trestbps</th>\n","      <th>fbs</th>\n","      <th>restecg</th>\n","      <th>thalach</th>\n","      <th>exang</th>\n","      <th>oldpeak</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4683eb68-eb6c-47b0-a83a-87edffecfb18')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4683eb68-eb6c-47b0-a83a-87edffecfb18 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4683eb68-eb6c-47b0-a83a-87edffecfb18');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["dfClean = dfClean.drop_duplicates()\n","print(\"All Duplicate Rows:\")\n","dfClean[dfClean.duplicated(keep=False)]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":70},"id":"IaG4B1XFVu8n","executionInfo":{"status":"ok","timestamp":1706227352414,"user_tz":-420,"elapsed":17,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"f5b03eee-9e28-48c6-ea6d-9fd52d0f6741"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["All Duplicate Rows:\n"]},{"output_type":"execute_result","data":{"text/plain":["Empty DataFrame\n","Columns: [age, sex, cp, trestbps, fbs, restecg, thalach, exang, oldpeak, target]\n","Index: []"],"text/html":["\n","  <div id=\"df-eedb88c5-1171-4f37-b8b5-489b506e4f1d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>sex</th>\n","      <th>cp</th>\n","      <th>trestbps</th>\n","      <th>fbs</th>\n","      <th>restecg</th>\n","      <th>thalach</th>\n","      <th>exang</th>\n","      <th>oldpeak</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eedb88c5-1171-4f37-b8b5-489b506e4f1d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-eedb88c5-1171-4f37-b8b5-489b506e4f1d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-eedb88c5-1171-4f37-b8b5-489b506e4f1d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["dfClean.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"MSV8Qeo4VyTw","executionInfo":{"status":"ok","timestamp":1706227352414,"user_tz":-420,"elapsed":15,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"0f29d19b-57b8-4bc6-a781-b11cabb5c915"},"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    age  sex   cp  trestbps  fbs  restecg  thalach  exang  oldpeak  target\n","0  65.0  1.0  4.0     115.0  0.0      0.0     93.0    1.0      0.0     1.0\n","1  32.0  1.0  1.0      95.0  0.0      0.0    127.0    0.0      0.7     1.0\n","2  61.0  1.0  4.0     105.0  0.0      0.0    110.0    1.0      1.5     1.0\n","3  50.0  1.0  4.0     145.0  0.0      0.0    139.0    1.0      0.7     1.0\n","4  57.0  1.0  4.0     110.0  0.0      1.0    131.0    1.0      1.4     3.0"],"text/html":["\n","  <div id=\"df-fef9b417-699e-4dc4-9022-d34bb29a7f6d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>sex</th>\n","      <th>cp</th>\n","      <th>trestbps</th>\n","      <th>fbs</th>\n","      <th>restecg</th>\n","      <th>thalach</th>\n","      <th>exang</th>\n","      <th>oldpeak</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>65.0</td>\n","      <td>1.0</td>\n","      <td>4.0</td>\n","      <td>115.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>93.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>32.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>95.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>127.0</td>\n","      <td>0.0</td>\n","      <td>0.7</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>61.0</td>\n","      <td>1.0</td>\n","      <td>4.0</td>\n","      <td>105.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>110.0</td>\n","      <td>1.0</td>\n","      <td>1.5</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>50.0</td>\n","      <td>1.0</td>\n","      <td>4.0</td>\n","      <td>145.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>139.0</td>\n","      <td>1.0</td>\n","      <td>0.7</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>57.0</td>\n","      <td>1.0</td>\n","      <td>4.0</td>\n","      <td>110.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>131.0</td>\n","      <td>1.0</td>\n","      <td>1.4</td>\n","      <td>3.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fef9b417-699e-4dc4-9022-d34bb29a7f6d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-fef9b417-699e-4dc4-9022-d34bb29a7f6d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-fef9b417-699e-4dc4-9022-d34bb29a7f6d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-8b004f0b-0904-42a3-b9b2-5b232ce1d504\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8b004f0b-0904-42a3-b9b2-5b232ce1d504')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-8b004f0b-0904-42a3-b9b2-5b232ce1d504 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":31}]},{"cell_type":"code","source":["dfClean['target'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A3yOsF5dVzKI","executionInfo":{"status":"ok","timestamp":1706227352414,"user_tz":-420,"elapsed":14,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"e1ad59f8-6228-4c13-926a-4bf24164557e"},"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.0    48\n","2.0    32\n","3.0    30\n","0.0     8\n","4.0     5\n","Name: target, dtype: int64"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["import seaborn as sns\n","import matplotlib.pyplot as plt"],"metadata":{"id":"BugO9NddV0UF","executionInfo":{"status":"ok","timestamp":1706227354177,"user_tz":-420,"elapsed":1776,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":33,"outputs":[]},{"cell_type":"code","source":["dfClean.corr()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"v30pLa4mV1m5","executionInfo":{"status":"ok","timestamp":1706227354177,"user_tz":-420,"elapsed":6,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"f3d9967b-bc6b-4a06-9dba-5ac7cdf09f76"},"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["               age       sex        cp  trestbps       fbs   restecg  \\\n","age       1.000000 -0.049042 -0.033295  0.357636  0.120893  0.274539   \n","sex      -0.049042  1.000000  0.043017 -0.084065  0.061236  0.080047   \n","cp       -0.033295  0.043017  1.000000 -0.017277  0.090275 -0.237887   \n","trestbps  0.357636 -0.084065 -0.017277  1.000000  0.099741  0.190512   \n","fbs       0.120893  0.061236  0.090275  0.099741  1.000000  0.014847   \n","restecg   0.274539  0.080047 -0.237887  0.190512  0.014847  1.000000   \n","thalach  -0.283465 -0.121681 -0.056236 -0.207305  0.037062  0.009322   \n","exang    -0.033004  0.083337  0.268548  0.127946 -0.016187 -0.120658   \n","oldpeak   0.139791 -0.040291  0.184626  0.085952  0.065915 -0.081097   \n","target    0.050689  0.089853  0.232277  0.135510  0.202940  0.049268   \n","\n","           thalach     exang   oldpeak    target  \n","age      -0.283465 -0.033004  0.139791  0.050689  \n","sex      -0.121681  0.083337 -0.040291  0.089853  \n","cp       -0.056236  0.268548  0.184626  0.232277  \n","trestbps -0.207305  0.127946  0.085952  0.135510  \n","fbs       0.037062 -0.016187  0.065915  0.202940  \n","restecg   0.009322 -0.120658 -0.081097  0.049268  \n","thalach   1.000000 -0.221455  0.155986 -0.293710  \n","exang    -0.221455  1.000000  0.170161  0.122321  \n","oldpeak   0.155986  0.170161  1.000000  0.192674  \n","target   -0.293710  0.122321  0.192674  1.000000  "],"text/html":["\n","  <div id=\"df-99b5b3f2-cb80-4a1e-ae8b-c9f4f50e0187\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>sex</th>\n","      <th>cp</th>\n","      <th>trestbps</th>\n","      <th>fbs</th>\n","      <th>restecg</th>\n","      <th>thalach</th>\n","      <th>exang</th>\n","      <th>oldpeak</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>age</th>\n","      <td>1.000000</td>\n","      <td>-0.049042</td>\n","      <td>-0.033295</td>\n","      <td>0.357636</td>\n","      <td>0.120893</td>\n","      <td>0.274539</td>\n","      <td>-0.283465</td>\n","      <td>-0.033004</td>\n","      <td>0.139791</td>\n","      <td>0.050689</td>\n","    </tr>\n","    <tr>\n","      <th>sex</th>\n","      <td>-0.049042</td>\n","      <td>1.000000</td>\n","      <td>0.043017</td>\n","      <td>-0.084065</td>\n","      <td>0.061236</td>\n","      <td>0.080047</td>\n","      <td>-0.121681</td>\n","      <td>0.083337</td>\n","      <td>-0.040291</td>\n","      <td>0.089853</td>\n","    </tr>\n","    <tr>\n","      <th>cp</th>\n","      <td>-0.033295</td>\n","      <td>0.043017</td>\n","      <td>1.000000</td>\n","      <td>-0.017277</td>\n","      <td>0.090275</td>\n","      <td>-0.237887</td>\n","      <td>-0.056236</td>\n","      <td>0.268548</td>\n","      <td>0.184626</td>\n","      <td>0.232277</td>\n","    </tr>\n","    <tr>\n","      <th>trestbps</th>\n","      <td>0.357636</td>\n","      <td>-0.084065</td>\n","      <td>-0.017277</td>\n","      <td>1.000000</td>\n","      <td>0.099741</td>\n","      <td>0.190512</td>\n","      <td>-0.207305</td>\n","      <td>0.127946</td>\n","      <td>0.085952</td>\n","      <td>0.135510</td>\n","    </tr>\n","    <tr>\n","      <th>fbs</th>\n","      <td>0.120893</td>\n","      <td>0.061236</td>\n","      <td>0.090275</td>\n","      <td>0.099741</td>\n","      <td>1.000000</td>\n","      <td>0.014847</td>\n","      <td>0.037062</td>\n","      <td>-0.016187</td>\n","      <td>0.065915</td>\n","      <td>0.202940</td>\n","    </tr>\n","    <tr>\n","      <th>restecg</th>\n","      <td>0.274539</td>\n","      <td>0.080047</td>\n","      <td>-0.237887</td>\n","      <td>0.190512</td>\n","      <td>0.014847</td>\n","      <td>1.000000</td>\n","      <td>0.009322</td>\n","      <td>-0.120658</td>\n","      <td>-0.081097</td>\n","      <td>0.049268</td>\n","    </tr>\n","    <tr>\n","      <th>thalach</th>\n","      <td>-0.283465</td>\n","      <td>-0.121681</td>\n","      <td>-0.056236</td>\n","      <td>-0.207305</td>\n","      <td>0.037062</td>\n","      <td>0.009322</td>\n","      <td>1.000000</td>\n","      <td>-0.221455</td>\n","      <td>0.155986</td>\n","      <td>-0.293710</td>\n","    </tr>\n","    <tr>\n","      <th>exang</th>\n","      <td>-0.033004</td>\n","      <td>0.083337</td>\n","      <td>0.268548</td>\n","      <td>0.127946</td>\n","      <td>-0.016187</td>\n","      <td>-0.120658</td>\n","      <td>-0.221455</td>\n","      <td>1.000000</td>\n","      <td>0.170161</td>\n","      <td>0.122321</td>\n","    </tr>\n","    <tr>\n","      <th>oldpeak</th>\n","      <td>0.139791</td>\n","      <td>-0.040291</td>\n","      <td>0.184626</td>\n","      <td>0.085952</td>\n","      <td>0.065915</td>\n","      <td>-0.081097</td>\n","      <td>0.155986</td>\n","      <td>0.170161</td>\n","      <td>1.000000</td>\n","      <td>0.192674</td>\n","    </tr>\n","    <tr>\n","      <th>target</th>\n","      <td>0.050689</td>\n","      <td>0.089853</td>\n","      <td>0.232277</td>\n","      <td>0.135510</td>\n","      <td>0.202940</td>\n","      <td>0.049268</td>\n","      <td>-0.293710</td>\n","      <td>0.122321</td>\n","      <td>0.192674</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-99b5b3f2-cb80-4a1e-ae8b-c9f4f50e0187')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-99b5b3f2-cb80-4a1e-ae8b-c9f4f50e0187 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-99b5b3f2-cb80-4a1e-ae8b-c9f4f50e0187');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-81346b63-f810-40e1-af96-5ad8655c9e07\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-81346b63-f810-40e1-af96-5ad8655c9e07')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-81346b63-f810-40e1-af96-5ad8655c9e07 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":34}]},{"cell_type":"code","source":["cor_mat=dfClean.corr()\n","fig,ax=plt.subplots(figsize=(15,10))\n","sns.heatmap(cor_mat,annot=True,linewidths=0.5,fmt=\".3f\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":853},"id":"Gdmfh9HyV2_R","executionInfo":{"status":"ok","timestamp":1706227355937,"user_tz":-420,"elapsed":1765,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"f172a1bc-75c6-4044-f5ab-bda076ae2aec"},"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":35},{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x1000 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["#Data Construct"],"metadata":{"id":"nvLvSEYEEEEy"}},{"cell_type":"code","source":["dfClean.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HgHwP4ryV6Et","executionInfo":{"status":"ok","timestamp":1706227355938,"user_tz":-420,"elapsed":10,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"a0812280-2ba4-4b4e-873e-4d319cb5282e"},"execution_count":36,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 123 entries, 0 to 122\n","Data columns (total 10 columns):\n"," #   Column    Non-Null Count  Dtype  \n","---  ------    --------------  -----  \n"," 0   age       123 non-null    float64\n"," 1   sex       123 non-null    float64\n"," 2   cp        123 non-null    float64\n"," 3   trestbps  123 non-null    float64\n"," 4   fbs       123 non-null    float64\n"," 5   restecg   123 non-null    float64\n"," 6   thalach   123 non-null    float64\n"," 7   exang     123 non-null    float64\n"," 8   oldpeak   123 non-null    float64\n"," 9   target    123 non-null    float64\n","dtypes: float64(10)\n","memory usage: 10.6 KB\n"]}]},{"cell_type":"code","source":["dfClean.head(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"3mL1zbO1V92z","executionInfo":{"status":"ok","timestamp":1706227355938,"user_tz":-420,"elapsed":7,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"0509c6fe-f6cb-4aa5-cf56-f8b31a16df5e"},"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    age  sex   cp  trestbps  fbs  restecg  thalach  exang  oldpeak  target\n","0  65.0  1.0  4.0     115.0  0.0      0.0     93.0    1.0      0.0     1.0\n","1  32.0  1.0  1.0      95.0  0.0      0.0    127.0    0.0      0.7     1.0\n","2  61.0  1.0  4.0     105.0  0.0      0.0    110.0    1.0      1.5     1.0\n","3  50.0  1.0  4.0     145.0  0.0      0.0    139.0    1.0      0.7     1.0\n","4  57.0  1.0  4.0     110.0  0.0      1.0    131.0    1.0      1.4     3.0"],"text/html":["\n","  <div id=\"df-1eb90872-a897-4d7d-abc0-7a7ec634a1a8\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>sex</th>\n","      <th>cp</th>\n","      <th>trestbps</th>\n","      <th>fbs</th>\n","      <th>restecg</th>\n","      <th>thalach</th>\n","      <th>exang</th>\n","      <th>oldpeak</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>65.0</td>\n","      <td>1.0</td>\n","      <td>4.0</td>\n","      <td>115.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>93.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>32.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>95.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>127.0</td>\n","      <td>0.0</td>\n","      <td>0.7</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>61.0</td>\n","      <td>1.0</td>\n","      <td>4.0</td>\n","      <td>105.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>110.0</td>\n","      <td>1.0</td>\n","      <td>1.5</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>50.0</td>\n","      <td>1.0</td>\n","      <td>4.0</td>\n","      <td>145.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>139.0</td>\n","      <td>1.0</td>\n","      <td>0.7</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>57.0</td>\n","      <td>1.0</td>\n","      <td>4.0</td>\n","      <td>110.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>131.0</td>\n","      <td>1.0</td>\n","      <td>1.4</td>\n","      <td>3.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1eb90872-a897-4d7d-abc0-7a7ec634a1a8')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1eb90872-a897-4d7d-abc0-7a7ec634a1a8 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1eb90872-a897-4d7d-abc0-7a7ec634a1a8');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-4fa2e366-0fe2-48ec-8a36-c122eeb9e4c1\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4fa2e366-0fe2-48ec-8a36-c122eeb9e4c1')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-4fa2e366-0fe2-48ec-8a36-c122eeb9e4c1 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":37}]},{"cell_type":"code","source":["X = dfClean.drop(\"target\",axis=1).values\n","y = dfClean.iloc[:,-1]"],"metadata":{"id":"-FIfA0cxWJEL","executionInfo":{"status":"ok","timestamp":1706227355938,"user_tz":-420,"elapsed":7,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":38,"outputs":[]},{"cell_type":"code","source":["dfClean['target'].value_counts().plot(kind='bar',figsize=(10,6),color=['green','blue'])\n","plt.title(\"Count of the target\")\n","plt.xticks(rotation=0);"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":545},"id":"FYgcfpWFWKr-","executionInfo":{"status":"ok","timestamp":1706227356542,"user_tz":-420,"elapsed":610,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"2ec79756-02ae-4b52-c80b-4540c5a223f9"},"execution_count":39,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["#Over Sampling"],"metadata":{"id":"s78AGWb1Fomj"}},{"cell_type":"markdown","source":["##SMOTE"],"metadata":{"id":"cbVNRcSWFrDJ"}},{"cell_type":"code","source":["from imblearn.over_sampling import SMOTE\n","# oversampling\n","#n_neighbors = 6  # You can adjust this value based on your needs\n","#if len(X) <= n_neighbors:\n","#    raise ValueError(\"Number of samples should be greater than the number of neighbors.\")\n","smote = SMOTE(random_state=42)\n","X_smote_resampled, y_smote_resampled = smote.fit_resample(X, y)"],"metadata":{"id":"WWrjgXtVWMk2","executionInfo":{"status":"error","timestamp":1706227262990,"user_tz":-420,"elapsed":596,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"colab":{"base_uri":"https://localhost:8080/","height":355},"outputId":"a5b972c3-aa76-431a-d74c-f4bed3a62ad2"},"execution_count":128,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"Expected n_neighbors <= n_samples,  but n_samples = 5, n_neighbors = 6","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-128-5c258a5543dd>\u001b[0m in \u001b[0;36m<cell line: 7>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m#    raise ValueError(\"Number of samples should be greater than the number of neighbors.\")\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0msmote\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mSMOTE\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m42\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0mX_smote_resampled\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_smote_resampled\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msmote\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_resample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/imblearn/base.py\u001b[0m in \u001b[0;36mfit_resample\u001b[0;34m(self, X, y)\u001b[0m\n\u001b[1;32m    201\u001b[0m         \"\"\"\n\u001b[1;32m    202\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_params\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 203\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_resample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    204\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    205\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_more_tags\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/imblearn/base.py\u001b[0m in \u001b[0;36mfit_resample\u001b[0;34m(self, X, y)\u001b[0m\n\u001b[1;32m     86\u001b[0m         )\n\u001b[1;32m     87\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 88\u001b[0;31m         \u001b[0moutput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fit_resample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     89\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     90\u001b[0m         y_ = (\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/imblearn/over_sampling/_smote/base.py\u001b[0m in \u001b[0;36m_fit_resample\u001b[0;34m(self, X, y)\u001b[0m\n\u001b[1;32m    353\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    354\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnn_k_\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_class\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 355\u001b[0;31m             \u001b[0mnns\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnn_k_\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkneighbors\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_class\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreturn_distance\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    356\u001b[0m             X_new, y_new = self._make_samples(\n\u001b[1;32m    357\u001b[0m                 \u001b[0mX_class\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclass_sample\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_class\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_samples\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1.0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_base.py\u001b[0m in \u001b[0;36mkneighbors\u001b[0;34m(self, X, n_neighbors, return_distance)\u001b[0m\n\u001b[1;32m    808\u001b[0m         \u001b[0mn_samples_fit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_samples_fit_\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    809\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mn_neighbors\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0mn_samples_fit\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 810\u001b[0;31m             raise ValueError(\n\u001b[0m\u001b[1;32m    811\u001b[0m                 \u001b[0;34m\"Expected n_neighbors <= n_samples, \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    812\u001b[0m                 \u001b[0;34m\" but n_samples = %d, n_neighbors = %d\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mn_samples_fit\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_neighbors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Expected n_neighbors <= n_samples,  but n_samples = 5, n_neighbors = 6"]}]},{"cell_type":"code","source":["plt.figure(figsize=(12, 4))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":52},"id":"5MoF8kRNWObL","executionInfo":{"status":"ok","timestamp":1706227263510,"user_tz":-420,"elapsed":11,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"1e6feb5b-ea99-42dd-943e-769504c44003"},"execution_count":129,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Figure size 1200x400 with 0 Axes>"]},"metadata":{},"execution_count":129},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x400 with 0 Axes>"]},"metadata":{}}]},{"cell_type":"code","source":["new_df1 = pd.DataFrame(data=y)"],"metadata":{"id":"f4NfZOoDWPPu","executionInfo":{"status":"ok","timestamp":1706227263510,"user_tz":-420,"elapsed":9,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":130,"outputs":[]},{"cell_type":"code","source":["plt.subplot(1, 2, 1)\n","new_df1.value_counts().plot(kind='bar',figsize=(10,6),color=['green','blue','red','yellow'])\n","plt.title(\"target before over sampling with SMOTE \")\n","plt.xticks(rotation=0);"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"ClrqXu1NWQaw","executionInfo":{"status":"ok","timestamp":1706227263510,"user_tz":-420,"elapsed":9,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"703fca99-f2b3-428e-be07-1a0b5d1cc319"},"execution_count":131,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["plt.subplot(1, 2, 2)\n","new_df2 = pd.DataFrame(data=y_smote_resampled)\n","\n","new_df2.value_counts().plot(kind='bar',figsize=(10,6),color=['green','blue','red','yellow'])\n","plt.title(\"target after over sampling with SMOTE\")\n","plt.xticks(rotation=0);\n","\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":663},"id":"mh8XCKdoWRYK","executionInfo":{"status":"error","timestamp":1706227263964,"user_tz":-420,"elapsed":462,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"0974b776-7261-4bcb-8358-616d29ea15ac"},"execution_count":132,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'y_smote_resampled' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-132-f3253628037f>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msubplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mnew_df2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0my_smote_resampled\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mnew_df2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalue_counts\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkind\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'bar'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'green'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'blue'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'red'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'yellow'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"target after over sampling with SMOTE\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'y_smote_resampled' is not defined"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["new_df1 = pd.DataFrame(data=y)\n","new_df1.value_counts()"],"metadata":{"id":"ONgNSvk5WUlm","executionInfo":{"status":"aborted","timestamp":1706227263964,"user_tz":-420,"elapsed":2,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# over\n","new_df2 = pd.DataFrame(data=y_smote_resampled)\n","new_df2.value_counts()"],"metadata":{"id":"oJ3NC37jWWsG","executionInfo":{"status":"aborted","timestamp":1706227263964,"user_tz":-420,"elapsed":2,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dfClean.describe()"],"metadata":{"id":"6TkfV5nKWY3k","executionInfo":{"status":"aborted","timestamp":1706227263964,"user_tz":-420,"elapsed":2,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.preprocessing import MinMaxScaler\n","scaler = MinMaxScaler()\n","X_smote_resampled_normal = scaler.fit_transform(X_smote_resampled)\n","len(X_smote_resampled_normal)"],"metadata":{"id":"X9PHBwIlWcoU","executionInfo":{"status":"aborted","timestamp":1706227263965,"user_tz":-420,"elapsed":3,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dfcek1 = pd.DataFrame(X_smote_resampled_normal)\n","dfcek1.describe()"],"metadata":{"id":"EL6rc0GTWeIa","executionInfo":{"status":"aborted","timestamp":1706227263965,"user_tz":-420,"elapsed":3,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#Model"],"metadata":{"id":"2DIjfh7QGYqN"}},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score,recall_score,f1_score,precision_score,roc_auc_score,confusion_matrix,precision_score"],"metadata":{"id":"Dqo0Fbc56mVR","executionInfo":{"status":"ok","timestamp":1706227428409,"user_tz":-420,"elapsed":1284,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":49,"outputs":[]},{"cell_type":"code","source":["def evaluation(Y_test,Y_pred):\n","    acc = accuracy_score(Y_test,Y_pred)\n","    rcl = recall_score(Y_test,Y_pred,average = 'weighted')\n","    f1 = f1_score(Y_test,Y_pred,average = 'weighted')\n","    ps = precision_score(Y_test,Y_pred,average = 'weighted')\n","\n","    metric_dict={'accuracy': round(acc,3), 'recall': round(rcl,3), 'F1 score': round(f1,3), 'Precision score': round(ps,3)}\n","    return print(metric_dict)"],"metadata":{"id":"kxUmgtoGWiVB","executionInfo":{"status":"ok","timestamp":1706227448192,"user_tz":-420,"elapsed":3,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":51,"outputs":[]},{"cell_type":"markdown","source":["##Raw"],"metadata":{"id":"afLYE0hNwt9D"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split"],"metadata":{"id":"DWJjhi0XWgis","executionInfo":{"status":"ok","timestamp":1706227396032,"user_tz":-420,"elapsed":2,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":42,"outputs":[]},{"cell_type":"code","source":["# membagi fitur dan target menjadi data train dan test (untuk yang raw saja)\n","X_train_raw, X_test_raw, y_train_raw, y_test_raw = train_test_split(X, y, test_size=0.2, random_state=42,stratify=y)\n","# membagi fitur dan target menjadi data train dan test (untuk yang oversample saja)\n","#X_train, X_test, y_train, y_test = train_test_split(X_smote_resampled, y_smote_resampled, test_size=0.2, random_state=42,stratify=y_smote_resampled)\n","# membagi fitur dan target menjadi data train dan test (untuk yang oversample + normalization)\n","#X_train_normal, X_test_normal, y_train_normal, y_test_normal = train_test_split(X_smote_resampled_normal, y_smote_resampled, test_size=0.2, random_state=42,stratify = y_smote_resampled)"],"metadata":{"id":"CojO729X6lr8","executionInfo":{"status":"ok","timestamp":1706227408517,"user_tz":-420,"elapsed":12,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":43,"outputs":[]},{"cell_type":"code","source":["from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn import tree\n","from xgboost import XGBClassifier\n","from sklearn.metrics import accuracy_score, classification_report"],"metadata":{"id":"2URgGwhuwx2v","executionInfo":{"status":"ok","timestamp":1706227413010,"user_tz":-420,"elapsed":768,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":44,"outputs":[]},{"cell_type":"markdown","source":["###Decision Tree"],"metadata":{"id":"rjaOjvvoncUw"}},{"cell_type":"code","source":["tree_model = tree.DecisionTreeClassifier()\n","tree_model.fit(X_train_raw, y_train_raw)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":74},"id":"uKjboL6bns3T","executionInfo":{"status":"ok","timestamp":1706227413010,"user_tz":-420,"elapsed":4,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"6db046e1-1daa-4286-96e5-e5041f1447d1"},"execution_count":45,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DecisionTreeClassifier()"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":45}]},{"cell_type":"code","source":["y_pred_tree = tree_model.predict(X_test_raw)\n","# Evaluate the KNN model\n","print(\"Decision Tree Model:\")\n","accuracy_tree = round(accuracy_score(y_test_raw,y_pred_tree),3)\n","print(\"Accuracy:\", accuracy_tree)\n","print(\"Classification Report:\")\n","print(classification_report(y_test_raw, y_pred_tree))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YcM7PfJ4oMdj","executionInfo":{"status":"ok","timestamp":1706227415669,"user_tz":-420,"elapsed":1091,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"e480dd72-36b6-4f11-f7ca-4f4413cf159e"},"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["Decision Tree Model:\n","Accuracy: 0.28\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","         0.0       0.00      0.00      0.00         2\n","         1.0       0.46      0.60      0.52        10\n","         2.0       0.00      0.00      0.00         6\n","         3.0       0.33      0.17      0.22         6\n","         4.0       0.00      0.00      0.00         1\n","\n","    accuracy                           0.28        25\n","   macro avg       0.16      0.15      0.15        25\n","weighted avg       0.26      0.28      0.26        25\n","\n"]}]},{"cell_type":"code","source":["evaluation(y_test_raw,y_pred_tree)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"k2Mj55w4ovPT","executionInfo":{"status":"ok","timestamp":1706227455073,"user_tz":-420,"elapsed":1170,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"265e6203-a1ce-41f1-e0f7-045a492f5167"},"execution_count":52,"outputs":[{"output_type":"stream","name":"stdout","text":["{'accuracy': 0.28, 'recall': 0.28, 'F1 score': 0.262, 'Precision score': 0.265}\n"]}]},{"cell_type":"code","source":["cm = confusion_matrix(y_test_raw, y_pred_tree)\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\")\n","plt.title('Confusion Matrix')\n","plt.xlabel('True')\n","plt.ylabel('Predict')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"NVm7I_qso1te","executionInfo":{"status":"ok","timestamp":1706227458217,"user_tz":-420,"elapsed":4,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"d8cf3ec2-eb2f-4465-956c-557bece4fbb0"},"execution_count":53,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["###KNN"],"metadata":{"id":"PfbwfL_KyMr1"}},{"cell_type":"code","source":["knn_model = KNeighborsClassifier(n_neighbors = 3)\n","knn_model.fit(X_train_raw, y_train_raw)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":74},"executionInfo":{"status":"ok","timestamp":1706227462830,"user_tz":-420,"elapsed":388,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"53791b17-c8f3-406f-8a31-7e03c77e038a","id":"jCjMGh82yMsG"},"execution_count":54,"outputs":[{"output_type":"execute_result","data":{"text/plain":["KNeighborsClassifier(n_neighbors=3)"],"text/html":["<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(n_neighbors=3)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier(n_neighbors=3)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":54}]},{"cell_type":"code","source":["y_pred_knn = tree_model.predict(X_test_raw)\n","# Evaluate the KNN model\n","print(\"K-Nearest Neighbors (KNN) Model:\")\n","accuracy_knn = round(accuracy_score(y_test_raw,y_pred_knn),3)\n","print(\"Accuracy:\", accuracy_knn)\n","print(\"Classification Report:\")\n","print(classification_report(y_test_raw, y_pred_knn))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1706227463596,"user_tz":-420,"elapsed":8,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"960abedd-bcea-4cc6-a307-f1d7052dd468","id":"nOXh_zjtyMsG"},"execution_count":55,"outputs":[{"output_type":"stream","name":"stdout","text":["K-Nearest Neighbors (KNN) Model:\n","Accuracy: 0.28\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","         0.0       0.00      0.00      0.00         2\n","         1.0       0.46      0.60      0.52        10\n","         2.0       0.00      0.00      0.00         6\n","         3.0       0.33      0.17      0.22         6\n","         4.0       0.00      0.00      0.00         1\n","\n","    accuracy                           0.28        25\n","   macro avg       0.16      0.15      0.15        25\n","weighted avg       0.26      0.28      0.26        25\n","\n"]}]},{"cell_type":"code","source":["evaluation(y_test_raw,y_pred_knn)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1706227463596,"user_tz":-420,"elapsed":7,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"df2565d9-97cb-4401-e2e8-6571a020ee46","id":"nc-hKdFWyMsG"},"execution_count":56,"outputs":[{"output_type":"stream","name":"stdout","text":["{'accuracy': 0.28, 'recall': 0.28, 'F1 score': 0.262, 'Precision score': 0.265}\n"]}]},{"cell_type":"code","source":["cm = confusion_matrix(y_test_raw, y_pred_knn)\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\")\n","plt.title('Confusion Matrix')\n","plt.xlabel('True')\n","plt.ylabel('Predict')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"executionInfo":{"status":"ok","timestamp":1706227463596,"user_tz":-420,"elapsed":4,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"510bee3e-5a15-4464-9625-6f0adae13002","id":"QK2CbCR7yMsG"},"execution_count":57,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"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oWeeeCTr53femChJatf5dg2OHXOxt8EHOBcFyEbfLesyDMMwu4jz589nPfEWHh6uokWLXtH20i8URFUA4DsHE1PNLgGwnFrlgkzbd7F/TPXZttM++6fPtp0TU+e5+1PRokVVrhzxMQAAMAkPVAAAAMCKLJHcAQAAmMpG99yR3AEAANgIyR0AAICN7rmjuQMAAOCyLAAAAKyI5A4AADheTt91f7UiuQMAALARkjsAAOB4JHcAAACwJJI7AAAA+wR3JHcAAAB2QnIHAAAcz0733NHcAQAAx7NTc8dlWQAAABshuQMAAI5HcgcAAABLIrkDAACOR3IHAAAASyK5AwAAsE9wR3IHAABgFaNHj5bL5fJaatasmadtkNwBAADHs9I9d3Xq1NGSJUuyfi5SJG/tGs0dAACAhRQpUkRly5bN//sLsBYAAICrki+TO4/HI4/H4zXmdrvldrtzXH/v3r0qX768AgMD1aJFC8XFxalixYq53h/33AEAAMf7+31uBbnExcUpNDTUa4mLi8uxjmbNmmnmzJlatGiRpk6dqoMHD6pVq1Y6ffp07o/FMAyjoH4xVpF+wewKAODSDiamml0CYDm1ygWZtu9SD8z12baPvHVnnpK7vzp58qQiIyM1ceJEDRgwIFf747IsAABwPF9els1tI5eTEiVKqHr16tq3b1+u38NlWQAAAIs6c+aM9u/fr3LlyuX6PTR3AAAALh8ueTB06FCtXLlSP/30k9asWaMePXrI399f9957b663wWVZAAAAi/j111917733Kjk5WREREbr55pu1bt06RURE5HobNHcAAMDxrDKJ8bx58654G1yWBQAAsBGSOwAA4HhWSe4KAs0dAABwPDs1d1yWBQAAsBGSOwAAAPsEdyR3AAAAdkJyBwAAHI977gAAAGBJJHfwqZJNB5ldAv7iwWejzS4BfxjUvKLZJeAPlSOCzC4BFkByBwAAAEsiuQMAAI5np+SO5g4AADienZo7LssCAADYCMkdAACAfYI7kjsAAAA7IbkDAACOxz13AAAAsCSSOwAA4HgkdwAAALAkkjsAAOB4dkruaO4AAADs09txWRYAAMBOSO4AAIDj2emyLMkdAACAjZDcAQAAxyO5AwAAgCWR3AEAAMcjuQMAAIAlkdwBAADHs1NyR3MHAABgn96Oy7IAAAB2QnIHAAAcz06XZUnuAAAA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\n"},"metadata":{}}]},{"cell_type":"markdown","source":["###Random Forest"],"metadata":{"id":"oQTo8zNJyRLc"}},{"cell_type":"code","source":["rf_model = RandomForestClassifier(n_estimators=100, random_state=42)\n","rf_model.fit(X_train_raw, y_train_raw)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":74},"executionInfo":{"status":"ok","timestamp":1706227482211,"user_tz":-420,"elapsed":809,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"70013165-ea26-4028-ff86-08c8cd7b25c0","id":"kW802ciIyRLm"},"execution_count":62,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(random_state=42)"],"text/html":["<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=42)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":62}]},{"cell_type":"code","source":["y_pred_rf = rf_model.predict(X_test_raw)\n","# Evaluate the Random Forest model\n","print(\"\\nRandom Forest Model:\")\n","accuracy_rf = round(accuracy_score(y_test_raw, y_pred_rf),3)\n","print(\"Accuracy:\",accuracy_rf)\n","print(\"Classification Report:\")\n","print(classification_report(y_test_raw, y_pred_rf))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1706227482212,"user_tz":-420,"elapsed":7,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"df5e5b53-2cfa-40e8-ed67-8c178468908d","id":"jvydH4iEyRLm"},"execution_count":63,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Random Forest Model:\n","Accuracy: 0.36\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","         0.0       0.00      0.00      0.00         2\n","         1.0       0.47      0.70      0.56        10\n","         2.0       0.00      0.00      0.00         6\n","         3.0       0.50      0.33      0.40         6\n","         4.0       0.00      0.00      0.00         1\n","\n","    accuracy                           0.36        25\n","   macro avg       0.19      0.21      0.19        25\n","weighted avg       0.31      0.36      0.32        25\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}]},{"cell_type":"code","source":["evaluation(y_test_raw,y_pred_rf)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1706227482212,"user_tz":-420,"elapsed":6,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"84583b18-13b9-4d64-9548-44b0e2f8f125","id":"U9LQd35cyRLm"},"execution_count":64,"outputs":[{"output_type":"stream","name":"stdout","text":["{'accuracy': 0.36, 'recall': 0.36, 'F1 score': 0.32, 'Precision score': 0.307}\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}]},{"cell_type":"code","source":["cm = confusion_matrix(y_test_raw, y_pred_rf)\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\")\n","plt.title('Confusion Matrix')\n","plt.xlabel('True')\n","plt.ylabel('Predict')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"executionInfo":{"status":"ok","timestamp":1706227482755,"user_tz":-420,"elapsed":548,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"64a6788d-28bf-4094-a36d-f5154745a661","id":"NC13xkNQyRLn"},"execution_count":65,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["###XGBoost"],"metadata":{"id":"JSytpPXeyUmo"}},{"cell_type":"code","source":["xgb_model = XGBClassifier(learning_rate=0.1, n_estimators=100, random_state=42)\n","xgb_model.fit(X_train_raw, y_train_raw)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":248},"executionInfo":{"status":"ok","timestamp":1706227483354,"user_tz":-420,"elapsed":8,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"5e2a4809-f84f-4956-899b-23057df3c1d1","id":"MKZcz47tyUm4"},"execution_count":66,"outputs":[{"output_type":"execute_result","data":{"text/plain":["XGBClassifier(base_score=None, booster=None, callbacks=None,\n","              colsample_bylevel=None, colsample_bynode=None,\n","              colsample_bytree=None, device=None, early_stopping_rounds=None,\n","              enable_categorical=False, eval_metric=None, feature_types=None,\n","              gamma=None, grow_policy=None, importance_type=None,\n","              interaction_constraints=None, learning_rate=0.1, max_bin=None,\n","              max_cat_threshold=None, max_cat_to_onehot=None,\n","              max_delta_step=None, max_depth=None, max_leaves=None,\n","              min_child_weight=None, missing=nan, monotone_constraints=None,\n","              multi_strategy=None, n_estimators=100, n_jobs=None,\n","              num_parallel_tree=None, objective='multi:softprob', ...)"],"text/html":["<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n","              colsample_bylevel=None, colsample_bynode=None,\n","              colsample_bytree=None, device=None, early_stopping_rounds=None,\n","              enable_categorical=False, eval_metric=None, feature_types=None,\n","              gamma=None, grow_policy=None, importance_type=None,\n","              interaction_constraints=None, learning_rate=0.1, max_bin=None,\n","              max_cat_threshold=None, max_cat_to_onehot=None,\n","              max_delta_step=None, max_depth=None, max_leaves=None,\n","              min_child_weight=None, missing=nan, monotone_constraints=None,\n","              multi_strategy=None, n_estimators=100, n_jobs=None,\n","              num_parallel_tree=None, objective=&#x27;multi:softprob&#x27;, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n","              colsample_bylevel=None, colsample_bynode=None,\n","              colsample_bytree=None, device=None, early_stopping_rounds=None,\n","              enable_categorical=False, eval_metric=None, feature_types=None,\n","              gamma=None, grow_policy=None, importance_type=None,\n","              interaction_constraints=None, learning_rate=0.1, max_bin=None,\n","              max_cat_threshold=None, max_cat_to_onehot=None,\n","              max_delta_step=None, max_depth=None, max_leaves=None,\n","              min_child_weight=None, missing=nan, monotone_constraints=None,\n","              multi_strategy=None, n_estimators=100, n_jobs=None,\n","              num_parallel_tree=None, objective=&#x27;multi:softprob&#x27;, ...)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":66}]},{"cell_type":"code","source":["y_pred_xgb = xgb_model.predict(X_test_raw)\n","# Evaluate the XGBoost model\n","print(\"\\nXGBoost Model:\")\n","accuracy_xgb = round(accuracy_score(y_test_raw, y_pred_xgb),3)\n","print(\"Accuracy:\",accuracy_xgb)\n","print(\"Classification Report:\")\n","print(classification_report(y_test_raw, y_pred_xgb))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1706227483354,"user_tz":-420,"elapsed":5,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"e5d72369-6f68-4613-cb2a-4bef5d72c662","id":"Y0pcx4X3yUm4"},"execution_count":67,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","XGBoost Model:\n","Accuracy: 0.36\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","         0.0       0.00      0.00      0.00         2\n","         1.0       0.60      0.60      0.60        10\n","         2.0       0.14      0.17      0.15         6\n","         3.0       0.29      0.33      0.31         6\n","         4.0       0.00      0.00      0.00         1\n","\n","    accuracy                           0.36        25\n","   macro avg       0.21      0.22      0.21        25\n","weighted avg       0.34      0.36      0.35        25\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}]},{"cell_type":"code","source":["evaluation(y_test_raw,y_pred_xgb)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1706227483354,"user_tz":-420,"elapsed":4,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"80ef6b56-7247-47ed-f3ab-7d362bd3bd59","id":"cc5x3qr3yUm4"},"execution_count":68,"outputs":[{"output_type":"stream","name":"stdout","text":["{'accuracy': 0.36, 'recall': 0.36, 'F1 score': 0.351, 'Precision score': 0.343}\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}]},{"cell_type":"code","source":["cm = confusion_matrix(y_test_raw, y_pred_xgb)\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\")\n","plt.title('Confusion Matrix')\n","plt.xlabel('True')\n","plt.ylabel('Predict')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"executionInfo":{"status":"ok","timestamp":1706227484024,"user_tz":-420,"elapsed":673,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"ac15c329-f321-4f1e-c39e-3ff482f801b0","id":"ShsQdp7HyUm5"},"execution_count":69,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["##Oversample"],"metadata":{"id":"ZeO95pMeIdOl"}},{"cell_type":"code","source":["from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn import tree\n","from xgboost import XGBClassifier\n","from sklearn.metrics import accuracy_score, classification_report"],"metadata":{"id":"jqgXFkePWqZR","executionInfo":{"status":"aborted","timestamp":1706227290606,"user_tz":-420,"elapsed":17,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["###Decision Tree"],"metadata":{"id":"J4H7rvA2yIX3"}},{"cell_type":"code","source":["tree_model = tree.DecisionTreeClassifier()\n","tree_model.fit(X_train, y_train)"],"metadata":{"executionInfo":{"status":"aborted","timestamp":1706227290606,"user_tz":-420,"elapsed":17,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"id":"3M16y37kyIX_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_pred_tree = tree_model.predict(X_test)\n","# Evaluate the KNN model\n","print(\"Decision Tree Model:\")\n","accuracy_tree_smote = round(accuracy_score(y_test,y_pred_tree),3)\n","print(\"Accuracy:\", accuracy_tree_smote)\n","print(\"Classification Report:\")\n","print(classification_report(y_test, y_pred_tree))"],"metadata":{"executionInfo":{"status":"aborted","timestamp":1706227290607,"user_tz":-420,"elapsed":18,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"id":"iedvWqJZyIYA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["evaluation(y_test,y_pred_tree)"],"metadata":{"executionInfo":{"status":"aborted","timestamp":1706227290607,"user_tz":-420,"elapsed":17,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"id":"NURYw_20yIYA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cm = confusion_matrix(y_test, y_pred_tree)\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\")\n","plt.title('Confusion Matrix')\n","plt.xlabel('True')\n","plt.ylabel('Predict')\n","plt.show()"],"metadata":{"executionInfo":{"status":"aborted","timestamp":1706227290607,"user_tz":-420,"elapsed":17,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"id":"0O4Upma8yIYA"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["###KNN"],"metadata":{"id":"3ltKiJbcGhu5"}},{"cell_type":"code","source":["knn_model = KNeighborsClassifier(n_neighbors = 3)\n","knn_model.fit(X_train, y_train)"],"metadata":{"id":"3S6sKiRtWrpP","executionInfo":{"status":"aborted","timestamp":1706227290607,"user_tz":-420,"elapsed":17,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_pred_knn = knn_model.predict(X_test)\n","# Evaluate the KNN model\n","print(\"K-Nearest Neighbors (KNN) Model:\")\n","accuracy_knn_smote = round(accuracy_score(y_test,y_pred_knn),3)\n","print(\"Accuracy:\", accuracy_knn_smote)\n","print(\"Classification Report:\")\n","print(classification_report(y_test, y_pred_knn))"],"metadata":{"id":"VyDKB9NSWtAv","executionInfo":{"status":"aborted","timestamp":1706227290607,"user_tz":-420,"elapsed":17,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["evaluation(y_test,y_pred_knn)"],"metadata":{"id":"ISzVFSbfWuQP","executionInfo":{"status":"aborted","timestamp":1706227290607,"user_tz":-420,"elapsed":17,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cm = confusion_matrix(y_test, y_pred_knn)\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\")\n","plt.title('Confusion Matrix')\n","plt.xlabel('True')\n","plt.ylabel('Predict')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":245},"id":"nqceC_33WwnS","executionInfo":{"status":"error","timestamp":1706227290607,"user_tz":-420,"elapsed":17,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"3f4a7647-8631-4136-d35a-a041da58651f"},"execution_count":137,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'confusion_matrix' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-137-f7c8cb43546f>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mcm\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconfusion_matrix\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred_knn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m8\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m6\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mheatmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcm\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mannot\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfmt\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"d\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcmap\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"Blues\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Confusion Matrix'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'True'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'confusion_matrix' is not defined"]}]},{"cell_type":"markdown","source":["###Random Forest"],"metadata":{"id":"9HHyVBshGlxA"}},{"cell_type":"code","source":["rf_model = RandomForestClassifier(n_estimators=100, random_state=42)\n","rf_model.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":192},"id":"bC9GYQbuWzg0","executionInfo":{"status":"error","timestamp":1706227473532,"user_tz":-420,"elapsed":589,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"ed68b872-5fe1-4693-9100-5e1238913887"},"execution_count":61,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'X_train' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-61-f5ba0cef5b1a>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mrf_model\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mRandomForestClassifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_estimators\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m42\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mrf_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'X_train' is not defined"]}]},{"cell_type":"code","source":["y_pred_rf = rf_model.predict(X_test)\n","# Evaluate the Random Forest model\n","print(\"\\nRandom Forest Model:\")\n","accuracy_rf_smote = round(accuracy_score(y_test, y_pred_rf),3)\n","print(\"Accuracy:\",accuracy_rf_smote)\n","print(\"Classification Report:\")\n","print(classification_report(y_test, y_pred_rf))"],"metadata":{"id":"JdDrvVh_W00M","executionInfo":{"status":"aborted","timestamp":1706227469912,"user_tz":-420,"elapsed":5,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["evaluation(y_test,y_pred_rf)"],"metadata":{"id":"xVTEc6cnW1_Y","executionInfo":{"status":"aborted","timestamp":1706227469912,"user_tz":-420,"elapsed":4,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cm = confusion_matrix(y_test, y_pred_rf)\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\")\n","plt.title('Confusion Matrix')\n","plt.xlabel('True')\n","plt.ylabel('Predict')\n","plt.show()"],"metadata":{"id":"dhqGExdaW4N4","executionInfo":{"status":"aborted","timestamp":1706227469912,"user_tz":-420,"elapsed":4,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["###XGBoost"],"metadata":{"id":"YRvfNte1Gp2i"}},{"cell_type":"code","source":["xgb_model = XGBClassifier(learning_rate=0.1, n_estimators=100, random_state=42)\n","xgb_model.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":192},"id":"xXuvnvklW5yc","executionInfo":{"status":"error","timestamp":1706227470454,"user_tz":-420,"elapsed":4,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"56f5d281-dfd0-49e1-98fd-b08e52d76e89"},"execution_count":59,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'X_train' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-59-5b02442c1b5f>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mxgb_model\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mXGBClassifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlearning_rate\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_estimators\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m42\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mxgb_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'X_train' is not defined"]}]},{"cell_type":"code","source":["y_pred_xgb = xgb_model.predict(X_test)\n","# Evaluate the XGBoost model\n","print(\"\\nXGBoost Model:\")\n","accuracy_xgb_smote = round(accuracy_score(y_test, y_pred_xgb),3)\n","print(\"Accuracy:\",accuracy_xgb_smote)\n","print(\"Classification Report:\")\n","print(classification_report(y_test, y_pred_xgb))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":245},"id":"uuONg0bWW7F9","executionInfo":{"status":"error","timestamp":1706227471093,"user_tz":-420,"elapsed":4,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"outputId":"f62a49b9-05b1-40c4-de22-890f57720dda"},"execution_count":60,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'X_test' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-60-5e88a7bbb0bf>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0my_pred_xgb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mxgb_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;31m# Evaluate the XGBoost model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"\\nXGBoost Model:\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0maccuracy_xgb_smote\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mround\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maccuracy_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred_xgb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Accuracy:\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0maccuracy_xgb_smote\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'X_test' is not defined"]}]},{"cell_type":"code","source":["evaluation(y_test,y_pred_xgb)"],"metadata":{"id":"g-hEZhMqW8JC","executionInfo":{"status":"aborted","timestamp":1706227471093,"user_tz":-420,"elapsed":3,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cm = confusion_matrix(y_test, y_pred_xgb)\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\")\n","plt.title('Confusion Matrix')\n","plt.xlabel('True')\n","plt.ylabel('Predict')\n","plt.show()"],"metadata":{"id":"A7A9bDmDW95F","executionInfo":{"status":"aborted","timestamp":1706227471093,"user_tz":-420,"elapsed":3,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##Oversample + Normalisasi"],"metadata":{"id":"GlV5fnTAISZx"}},{"cell_type":"code","source":["from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn import tree\n","from xgboost import XGBClassifier\n","from sklearn.metrics import accuracy_score, classification_report"],"metadata":{"id":"bvMJ1QNuXAmZ","executionInfo":{"status":"aborted","timestamp":1706227290607,"user_tz":-420,"elapsed":16,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["###Decision Tree"],"metadata":{"id":"LoPGR0iLqr8h"}},{"cell_type":"code","source":["tree_model = tree.DecisionTreeClassifier()\n","tree_model.fit(X_train_normal, y_train_normal)"],"metadata":{"executionInfo":{"status":"aborted","timestamp":1706227290607,"user_tz":-420,"elapsed":16,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"id":"XrNOEWAuqr8p"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_pred_tree = tree_model.predict(X_test_normal)\n","# Evaluate the Decision tree model\n","print(\"Decision Tree Model:\")\n","accuracy_tree_smote_normal = round(accuracy_score(y_test_normal,y_pred_tree),3)\n","print(\"Accuracy:\", accuracy_tree_smote_normal)\n","print(\"Classification Report:\")\n","print(classification_report(y_test_normal, y_pred_tree))"],"metadata":{"executionInfo":{"status":"aborted","timestamp":1706227290607,"user_tz":-420,"elapsed":15,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"id":"4ImRMPZEqr8p"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["evaluation(y_test,y_pred_tree)"],"metadata":{"executionInfo":{"status":"aborted","timestamp":1706227290607,"user_tz":-420,"elapsed":15,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"id":"p_xCICpVqr8p"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cm = confusion_matrix(y_test, y_pred_tree)\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\")\n","plt.title('Confusion Matrix')\n","plt.xlabel('True')\n","plt.ylabel('Predict')\n","plt.show()"],"metadata":{"executionInfo":{"status":"aborted","timestamp":1706227290608,"user_tz":-420,"elapsed":16,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"id":"k6jD7j6Dqr8q"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["###KNN"],"metadata":{"id":"tg2E5FPXIYV5"}},{"cell_type":"code","source":["knn_model = KNeighborsClassifier(n_neighbors=3)\n","knn_model.fit(X_train_normal, y_train_normal)"],"metadata":{"id":"KzT8O7pqXBec","executionInfo":{"status":"aborted","timestamp":1706227290608,"user_tz":-420,"elapsed":16,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_pred_knn = knn_model.predict(X_test_normal)\n","# Evaluate the KNN model\n","print(\"K-Nearest Neighbors (KNN) Model:\")\n","accuracy_knn_smote_normal = round(accuracy_score(y_test_normal,y_pred_knn),3)\n","print(\"Accuracy:\", accuracy_knn_smote_normal)\n","print(\"Classification Report:\")\n","print(classification_report(y_test_normal, y_pred_knn))"],"metadata":{"id":"FQk0vybkXDUw","executionInfo":{"status":"aborted","timestamp":1706227290608,"user_tz":-420,"elapsed":16,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["evaluation(y_test_normal,y_pred_knn)"],"metadata":{"id":"Km6KmL-AXE-p","executionInfo":{"status":"aborted","timestamp":1706227290608,"user_tz":-420,"elapsed":16,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cm = confusion_matrix(y_test_normal, y_pred_knn)\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\")\n","plt.title('Confusion Matrix')\n","plt.xlabel('True')\n","plt.ylabel('Predict')\n","plt.show()"],"metadata":{"id":"y2uCvA5BXGKw","executionInfo":{"status":"aborted","timestamp":1706227290608,"user_tz":-420,"elapsed":16,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["###Random Forest"],"metadata":{"id":"3ING1Y0_IsH2"}},{"cell_type":"code","source":["rf_model = RandomForestClassifier(n_estimators=100, random_state=42)\n","rf_model.fit(X_train_normal, y_train_normal)"],"metadata":{"id":"qo6LFE2HXIom","executionInfo":{"status":"aborted","timestamp":1706227290608,"user_tz":-420,"elapsed":16,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pickle\n","with open('rf_model.pkl', 'wb') as file:\n","    pickle.dump(rf_model, file)"],"metadata":{"id":"iz-8pvhMWhA4","executionInfo":{"status":"aborted","timestamp":1706227290608,"user_tz":-420,"elapsed":16,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_pred_rf = rf_model.predict(X_test_normal)\n","# Evaluate the Random Forest model\n","print(\"\\nRandom Forest Model:\")\n","accuracy_rf_smote_normal = round(accuracy_score(y_test_normal, y_pred_rf),3)\n","print(\"Accuracy:\",accuracy_rf_smote_normal )\n","print(\"Classification Report:\")\n","print(classification_report(y_test_normal, y_pred_rf))"],"metadata":{"id":"deYkkjazXJ4f","executionInfo":{"status":"aborted","timestamp":1706227290608,"user_tz":-420,"elapsed":16,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["evaluation(y_test_normal,y_pred_rf)"],"metadata":{"id":"dmd0_OYGXLBn","executionInfo":{"status":"aborted","timestamp":1706227290608,"user_tz":-420,"elapsed":16,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cm = confusion_matrix(y_test_normal, y_pred_rf)\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\")\n","plt.title('Confusion Matrix')\n","plt.xlabel('True')\n","plt.ylabel('Predict')\n","plt.show()"],"metadata":{"id":"FqLuSlgqXMTi","executionInfo":{"status":"aborted","timestamp":1706227290608,"user_tz":-420,"elapsed":16,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["###XGBoost"],"metadata":{"id":"vDMvYjpsIwnN"}},{"cell_type":"code","source":["xgb_model = XGBClassifier(learning_rate=0.1, n_estimators=100, random_state=42)\n","xgb_model.fit(X_train_normal, y_train_normal)"],"metadata":{"id":"iDEzejzeXNkC","executionInfo":{"status":"aborted","timestamp":1706227290608,"user_tz":-420,"elapsed":16,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_pred_xgb = xgb_model.predict(X_test_normal)\n","# Evaluate the XGBoost model\n","print(\"\\nXGBoost Model:\")\n","accuracy_xgb_smote_normal = round(accuracy_score(y_test_normal, y_pred_xgb),3)\n","print(\"Accuracy:\",accuracy_xgb_smote_normal)\n","print(\"Classification Report:\")\n","print(classification_report(y_test_normal, y_pred_xgb))"],"metadata":{"id":"KbTLakhJXO7p","executionInfo":{"status":"aborted","timestamp":1706227290608,"user_tz":-420,"elapsed":16,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["evaluation(y_test_normal,y_pred_xgb)"],"metadata":{"id":"S7azLwB-XQEp","executionInfo":{"status":"aborted","timestamp":1706227290608,"user_tz":-420,"elapsed":16,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cm = confusion_matrix(y_test_normal, y_pred_xgb)"],"metadata":{"id":"waphBBnnXREs","executionInfo":{"status":"aborted","timestamp":1706227290608,"user_tz":-420,"elapsed":16,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.figure(figsize=(8, 6))\n","sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\")\n","plt.title('Confusion Matrix')\n","plt.xlabel('True')\n","plt.ylabel('Predict')\n","plt.show()"],"metadata":{"id":"AotU7LpbXShm","executionInfo":{"status":"aborted","timestamp":1706227290608,"user_tz":-420,"elapsed":16,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##Tunning + Normalization + Oversample"],"metadata":{"id":"X6vJD5KiI13n"}},{"cell_type":"code","source":["from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn import tree\n","from xgboost import XGBClassifier\n","from sklearn.metrics import accuracy_score, classification_report\n","from sklearn.model_selection import RandomizedSearchCV"],"metadata":{"id":"N68sm0sh1RXD","executionInfo":{"status":"aborted","timestamp":1706227290608,"user_tz":-420,"elapsed":16,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["###Decision Tree"],"metadata":{"id":"Jjs0Eu4nqqqA"}},{"cell_type":"code","source":["tree_model.fit(X_train_normal, y_train_normal)"],"metadata":{"executionInfo":{"status":"aborted","timestamp":1706227290608,"user_tz":-420,"elapsed":16,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"id":"W2XaOjwXqqqH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["param_grid = {\"max_depth\": [3, None],\n","              \"max_features\": [\"sqrt\", \"log2\"],\n","              \"min_samples_leaf\": [1, 2],\n","              \"criterion\": [\"gini\", \"entropy\"]}"],"metadata":{"id":"CR2ONHw-tFmm","executionInfo":{"status":"aborted","timestamp":1706227290609,"user_tz":-420,"elapsed":17,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["tree_model = RandomizedSearchCV(estimator=tree_model, param_distributions=param_grid, n_iter=100, scoring=\"accuracy\", cv=5)"],"metadata":{"id":"_FtpKLkatIPH","executionInfo":{"status":"aborted","timestamp":1706227290609,"user_tz":-420,"elapsed":17,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["tree_model.fit(X_train_normal, y_train_normal)\n","\n","best_params = tree_model.best_params_\n","print(f\"Best parameters: {best_params}\")"],"metadata":{"id":"PHINNLPhtNfA","executionInfo":{"status":"aborted","timestamp":1706227290609,"user_tz":-420,"elapsed":17,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_pred_tree = tree_model.predict(X_test_normal)"],"metadata":{"id":"3xAhNyWntQcY","executionInfo":{"status":"aborted","timestamp":1706227290609,"user_tz":-420,"elapsed":17,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Evaluate the Decision Tree model\n","print(\"Decision Tree Model:\")\n","accuracy_tree_smote_normal_Tun = round(accuracy_score(y_test_normal,y_pred_tree),3)\n","print(\"Accuracy:\", accuracy_tree_smote_normal_Tun)\n","print(\"Classification Report:\")\n","print(classification_report(y_test_normal, y_pred_tree))"],"metadata":{"executionInfo":{"status":"aborted","timestamp":1706227290609,"user_tz":-420,"elapsed":16,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"id":"uBWf-3G6tWx3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["evaluation(y_test_normal,y_pred_knn)"],"metadata":{"executionInfo":{"status":"aborted","timestamp":1706227290609,"user_tz":-420,"elapsed":16,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"id":"w2qpQam5tWx4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cm = confusion_matrix(y_test_normal, y_pred_knn)"],"metadata":{"id":"2RyoEV4ItWx4","executionInfo":{"status":"aborted","timestamp":1706227290609,"user_tz":-420,"elapsed":16,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.figure(figsize=(8, 6))\n","sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\")\n","plt.title('Confusion Matrix')\n","plt.xlabel('True')\n","plt.ylabel('Predict')\n","plt.show()"],"metadata":{"executionInfo":{"status":"aborted","timestamp":1706227290609,"user_tz":-420,"elapsed":16,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}},"id":"5uxaUri2tWx5"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["###KNN"],"metadata":{"id":"JG0Ja_t-I90B"}},{"cell_type":"code","source":["knn_model.fit(X_train_normal, y_train_normal)"],"metadata":{"id":"xUOdEFl21XBl","executionInfo":{"status":"aborted","timestamp":1706227290609,"user_tz":-420,"elapsed":16,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["param_grid = {\n","    \"n_neighbors\": range(3, 21),\n","    \"metric\": [\"euclidean\", \"manhattan\", \"chebyshev\"],\n","    \"weights\": [\"uniform\", \"distance\"],\n","    \"algorithm\": [\"auto\", \"ball_tree\", \"kd_tree\"],\n","    \"leaf_size\": range(10, 61),\n","}"],"metadata":{"id":"je-poPbS1Ylr","executionInfo":{"status":"aborted","timestamp":1706227290609,"user_tz":-420,"elapsed":16,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["knn_model = RandomizedSearchCV(estimator=knn_model, param_distributions=param_grid, n_iter=100, scoring=\"accuracy\", cv=5)"],"metadata":{"id":"krelUZtA1WIY","executionInfo":{"status":"aborted","timestamp":1706227290609,"user_tz":-420,"elapsed":16,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["knn_model.fit(X_train_normal, y_train_normal)\n","\n","best_params = knn_model.best_params_\n","print(f\"Best parameters: {best_params}\")"],"metadata":{"id":"V4qtT8jS1i7b","executionInfo":{"status":"aborted","timestamp":1706227290609,"user_tz":-420,"elapsed":16,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_pred_knn = knn_model.predict(X_test_normal)"],"metadata":{"id":"85qd758Y1mVR","executionInfo":{"status":"aborted","timestamp":1706227290609,"user_tz":-420,"elapsed":16,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Evaluate the KNN model\n","print(\"K-Nearest Neighbors (KNN) Model:\")\n","accuracy_knn_smote_normal_Tun = round(accuracy_score(y_test_normal,y_pred_knn),3)\n","print(\"Accuracy:\", accuracy_knn_smote_normal_Tun)\n","print(\"Classification Report:\")\n","print(classification_report(y_test_normal, y_pred_knn))"],"metadata":{"id":"SeXDL0WW1odS","executionInfo":{"status":"aborted","timestamp":1706227290609,"user_tz":-420,"elapsed":16,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["evaluation(y_test_normal,y_pred_knn)"],"metadata":{"id":"buuJzfUc1qoM","executionInfo":{"status":"aborted","timestamp":1706227290609,"user_tz":-420,"elapsed":16,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cm = confusion_matrix(y_test_normal, y_pred_knn)"],"metadata":{"id":"CPzg-vnD1sok","executionInfo":{"status":"aborted","timestamp":1706227290609,"user_tz":-420,"elapsed":16,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.figure(figsize=(8, 6))\n","sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\")\n","plt.title('Confusion Matrix')\n","plt.xlabel('True')\n","plt.ylabel('Predict')\n","plt.show()"],"metadata":{"id":"acnepPv81tyq","executionInfo":{"status":"aborted","timestamp":1706227290609,"user_tz":-420,"elapsed":16,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["###Random Forest"],"metadata":{"id":"1w0J_gAQJB6P"}},{"cell_type":"code","source":["param_grid = {\n","    \"n_estimators\": [100, 200],\n","    \"max_depth\": [ 10, 15],\n","    \"min_samples_leaf\": [1, 2],\n","    \"min_samples_split\": [2, 5],\n","    \"max_features\": [\"sqrt\", \"log2\"],\n","    # \"random_state\": [42, 100, 200]\n","}"],"metadata":{"id":"RQb-9n_Q1xU1","executionInfo":{"status":"aborted","timestamp":1706227290610,"user_tz":-420,"elapsed":17,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["rf_model = RandomizedSearchCV(rf_model, param_grid, n_iter=100, cv=5, n_jobs=-1)"],"metadata":{"id":"iHm0_mFX163Z","executionInfo":{"status":"aborted","timestamp":1706227290610,"user_tz":-420,"elapsed":17,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["rf_model.fit(X_train_normal, y_train_normal)"],"metadata":{"id":"fQwo5qgT19Zc","executionInfo":{"status":"aborted","timestamp":1706227290610,"user_tz":-420,"elapsed":17,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["best_params = rf_model.best_params_\n","print(f\"Best parameters: {best_params}\")"],"metadata":{"id":"3xG1yJ9P1-R6","executionInfo":{"status":"aborted","timestamp":1706227290610,"user_tz":-420,"elapsed":17,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_pred_rf = rf_model.predict(X_test_normal)"],"metadata":{"id":"kURuHLy62BFZ","executionInfo":{"status":"aborted","timestamp":1706227290610,"user_tz":-420,"elapsed":17,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Evaluate the Random Forest model\n","print(\"\\nRandom Forest Model:\")\n","accuracy_rf_smote_normal_Tun = round(accuracy_score(y_test_normal, y_pred_rf),3)\n","print(\"Accuracy:\",accuracy_rf_smote_normal_Tun)\n","print(\"Classification Report:\")\n","print(classification_report(y_test_normal, y_pred_rf))"],"metadata":{"id":"QCzO1sle2CoB","executionInfo":{"status":"aborted","timestamp":1706227290610,"user_tz":-420,"elapsed":17,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["evaluation(y_test_normal,y_pred_rf)"],"metadata":{"id":"-6viw_Eg2EBe","executionInfo":{"status":"aborted","timestamp":1706227290610,"user_tz":-420,"elapsed":17,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cm = confusion_matrix(y_test_normal, y_pred_knn)"],"metadata":{"id":"i-TKVYQW2E89","executionInfo":{"status":"aborted","timestamp":1706227290610,"user_tz":-420,"elapsed":17,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.figure(figsize=(8, 6))\n","sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\")\n","plt.title('Confusion Matrix')\n","plt.xlabel('True')\n","plt.ylabel('Predict')\n","plt.show()"],"metadata":{"id":"9vE4uAQV2GFI","executionInfo":{"status":"aborted","timestamp":1706227290610,"user_tz":-420,"elapsed":17,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["###XGBoost"],"metadata":{"id":"U3XDa57NJIfl"}},{"cell_type":"code","source":["xgb_model = XGBClassifier()"],"metadata":{"id":"DFsHMUBW2H8U","executionInfo":{"status":"aborted","timestamp":1706227290610,"user_tz":-420,"elapsed":17,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["param_grid = {\n","  \"max_depth\": [3, 5, 7],\n","  \"learning_rate\": [0.01, 0.1],\n","  \"n_estimators\": [100, 200],\n","  \"gamma\": [0, 0.1],\n","  \"colsample_bytree\": [0.7, 0.8],\n","}"],"metadata":{"id":"1Y6865JP2Kr8","executionInfo":{"status":"aborted","timestamp":1706227290610,"user_tz":-420,"elapsed":17,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["xgb_model = RandomizedSearchCV(xgb_model, param_grid, n_iter=10, cv=5, n_jobs=-1)"],"metadata":{"id":"9g7YtbZj2OVD","executionInfo":{"status":"aborted","timestamp":1706227290610,"user_tz":-420,"elapsed":17,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["xgb_model.fit(X_train_normal, y_train_normal)"],"metadata":{"id":"VhunV2Gl2PmR","executionInfo":{"status":"aborted","timestamp":1706227290610,"user_tz":-420,"elapsed":17,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["best_params = xgb_model.best_params_\n","print(f\"Best parameters: {best_params}\")"],"metadata":{"id":"Chhb0zsi2Q5Z","executionInfo":{"status":"aborted","timestamp":1706227290610,"user_tz":-420,"elapsed":17,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_pred_xgb = xgb_model.predict(X_test_normal)"],"metadata":{"id":"OW79leT82TW0","executionInfo":{"status":"aborted","timestamp":1706227290610,"user_tz":-420,"elapsed":17,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Evaluate the XGBoost model\n","print(\"\\nXGBoost Model:\")\n","accuracy_xgb_smote_normal_Tun = round(accuracy_score(y_test_normal, y_pred_xgb),3)\n","print(\"Accuracy:\",accuracy_xgb_smote_normal_Tun)\n","print(\"Classification Report:\")\n","print(classification_report(y_test_normal, y_pred_xgb))"],"metadata":{"id":"KKRyjjJl2UyR","executionInfo":{"status":"aborted","timestamp":1706227290610,"user_tz":-420,"elapsed":16,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["evaluation(y_test_normal,y_pred_xgb)"],"metadata":{"id":"tehswdjA2WUj","executionInfo":{"status":"aborted","timestamp":1706227290610,"user_tz":-420,"elapsed":16,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cm = confusion_matrix(y_test_normal, y_pred_xgb)"],"metadata":{"id":"4UtyRbid2Xv0","executionInfo":{"status":"aborted","timestamp":1706227290611,"user_tz":-420,"elapsed":17,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.figure(figsize=(8, 6))\n","sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\")\n","plt.title('Confusion Matrix')\n","plt.xlabel('True')\n","plt.ylabel('Predict')\n","plt.show()"],"metadata":{"id":"b7hTY4Pl2ZEi","executionInfo":{"status":"aborted","timestamp":1706227290611,"user_tz":-420,"elapsed":17,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#Evaluasi"],"metadata":{"id":"3RoxZs1FJPoj"}},{"cell_type":"code","source":["import matplotlib.pyplot as plt"],"metadata":{"id":"vqheXbKs2bIx","executionInfo":{"status":"aborted","timestamp":1706227290611,"user_tz":-420,"elapsed":17,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##Raw"],"metadata":{"id":"8f_V-m9NyaVA"}},{"cell_type":"code","source":["model_comp1 = pd.DataFrame({'Model': ['Decision -Tree', 'K-Nearest Neighbour','Random Forest',\n","                            'XGBoost'], 'Accuracy': [accuracy_tree*100, accuracy_knn*100,\n","                            accuracy_rf*100,accuracy_xgb*100]})"],"metadata":{"id":"Vu2fzf3Uyd4S","executionInfo":{"status":"aborted","timestamp":1706227290611,"user_tz":-420,"elapsed":17,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model_comp1.head()"],"metadata":{"id":"2XmXkmPOygXc","executionInfo":{"status":"aborted","timestamp":1706227290611,"user_tz":-420,"elapsed":17,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Membuat bar plot dengan keterangan jumlah\n","fig, ax = plt.subplots()\n","bars = plt.bar(model_comp1['Model'], model_comp1['Accuracy'], color=['red', 'green', 'blue', 'yellow'])\n","plt.xlabel('Model')\n","plt.ylabel('Accuracy (%)')\n","plt.title('Raw')\n","plt.xticks(rotation=45, ha='right') # Untuk memutar label sumbu x agar lebih mudah dibaca\n","\n","# Menambahkan keterangan jumlah di atas setiap bar\n","for bar in bars:\n","    yval = bar.get_height()\n","    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n","plt.show()"],"metadata":{"id":"FAcE1rOwyhxB","executionInfo":{"status":"aborted","timestamp":1706227290611,"user_tz":-420,"elapsed":17,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##Oversample"],"metadata":{"id":"N40oPqRLr0Mp"}},{"cell_type":"code","source":["model_comp1 = pd.DataFrame({'Model': ['Decision -Tree', 'K-Nearest Neighbour','Random Forest',\n","                            'XGBoost'], 'Accuracy': [accuracy_tree_smote*100, accuracy_knn_smote*100,\n","                            accuracy_rf_smote*100,accuracy_xgb_smote*100]})"],"metadata":{"id":"Xh75Mqz22cc6","executionInfo":{"status":"aborted","timestamp":1706227290611,"user_tz":-420,"elapsed":17,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model_comp1.head()"],"metadata":{"id":"uCDChSHt2f-J","executionInfo":{"status":"aborted","timestamp":1706227290611,"user_tz":-420,"elapsed":17,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Membuat bar plot dengan keterangan jumlah\n","fig, ax = plt.subplots()\n","bars = plt.bar(model_comp1['Model'], model_comp1['Accuracy'], color=['red', 'green', 'blue', 'yellow'])\n","plt.xlabel('Model')\n","plt.ylabel('Accuracy (%)')\n","plt.title('Oversample')\n","plt.xticks(rotation=45, ha='right') # Untuk memutar label sumbu x agar lebih mudah dibaca\n","\n","# Menambahkan keterangan jumlah di atas setiap bar\n","for bar in bars:\n","    yval = bar.get_height()\n","    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n","plt.show()"],"metadata":{"id":"ZVpWAAJ-2h86","executionInfo":{"status":"aborted","timestamp":1706227290611,"user_tz":-420,"elapsed":17,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##Oversample + Normalization"],"metadata":{"id":"ylJt1tcrr86e"}},{"cell_type":"code","source":["model_comp2 = pd.DataFrame({'Model': ['Decision Tree','K-Nearest Neighbour','Random Forest',\n","'XGBoost'], 'Accuracy': [accuracy_tree_smote_normal*100, accuracy_knn_smote_normal*100,\n","accuracy_rf_smote_normal*100,accuracy_xgb_smote_normal*100]})\n","\n","model_comp2.head()"],"metadata":{"id":"6Y5s5RoM2n_B","executionInfo":{"status":"aborted","timestamp":1706227290612,"user_tz":-420,"elapsed":18,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Membuat bar plot dengan keterangan jumlah\n","fig, ax = plt.subplots()\n","bars = plt.bar(model_comp2['Model'], model_comp2['Accuracy'], color=['red', 'green', 'blue', 'yellow'])\n","plt.xlabel('Model')\n","plt.ylabel('Accuracy (%)')\n","plt.title('Normalization + Oversampling')\n","plt.xticks(rotation=45, ha='right') # Untuk memutar label sumbu x agar lebih mudah dibaca\n","\n","# Menambahkan keterangan jumlah di atas setiap bar\n","for bar in bars:\n","    yval = bar.get_height()\n","    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n","plt.show()"],"metadata":{"id":"KmlYf9hB2p3P","executionInfo":{"status":"aborted","timestamp":1706227290612,"user_tz":-420,"elapsed":18,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##Tunning + Normalization + Oversample"],"metadata":{"id":"Pv_Z3zzKsEUr"}},{"cell_type":"code","source":["model_comp3 = pd.DataFrame({'Model': ['Decision Tree','K-Nearest Neighbour','Random Forest',\n","                            'XGBoost'], 'Accuracy': [accuracy_tree_smote_normal_Tun*100, accuracy_knn_smote_normal_Tun*100,\n","                            accuracy_rf_smote_normal_Tun*100,accuracy_xgb_smote_normal_Tun*100]})\n","\n","model_comp3.head()"],"metadata":{"id":"f77HSezk2wHL","executionInfo":{"status":"aborted","timestamp":1706227290613,"user_tz":-420,"elapsed":19,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Membuat bar plot dengan keterangan jumlah\n","fig, ax = plt.subplots()\n","bars = plt.bar(model_comp3['Model'], model_comp3['Accuracy'], color=['red', 'green', 'blue', 'yellow'])\n","plt.xlabel('Model')\n","plt.ylabel('Accuracy (%)')\n","plt.title('Normalization + Oversampling + Tunning')\n","plt.xticks(rotation=45, ha='right') # Untuk memutar label sumbu x agar lebih mudah dibaca\n","\n","# Menambahkan keterangan jumlah di atas setiap bar\n","for bar in bars:\n","    yval = bar.get_height()\n","    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n","plt.show()"],"metadata":{"id":"0qT1GM5922Ys","executionInfo":{"status":"aborted","timestamp":1706227290614,"user_tz":-420,"elapsed":20,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##Best Each Model"],"metadata":{"id":"WoXxUPkX9czi"}},{"cell_type":"code","source":["# Data frame\n","model_compBest = pd.DataFrame({\n","  'Model': ['Decision Tree', 'K-Nearest Neighbour OverSample Tunning', 'Random Forest OverSample',\n","            'XGB OverSample Standarization Tunning'],\n","  'Accuracy': [accuracy_tree_smote_normal_Tun*100, accuracy_knn_smote_normal_Tun*100, accuracy_rf_smote_normal*100,\n","              accuracy_xgb_smote_normal_Tun*100]\n","})"],"metadata":{"id":"7HXxyt5227L0","executionInfo":{"status":"aborted","timestamp":1706227290614,"user_tz":-420,"elapsed":20,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Membuat bar plot dengan keterangan jumlah\n","fig, ax = plt.subplots()\n","bars = plt.bar(model_compBest['Model'], model_compBest['Accuracy'], color=['red', 'green', 'blue', 'yellow'])\n","plt.xlabel('Model')\n","plt.ylabel('Accuracy (%)')\n","plt.title('Best Model Comparison')\n","plt.xticks(rotation=45, ha='right') # Untuk memutar label sumbu x agar lebih mudah dibaca\n","\n","# Menambahkan keterangan jumlah di atas setiap bar\n","for bar in bars:\n","    yval = bar.get_height()\n","    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n","plt.show()"],"metadata":{"id":"mgNR7X9S3BwC","executionInfo":{"status":"aborted","timestamp":1706227290614,"user_tz":-420,"elapsed":20,"user":{"displayName":"Julius Theo","userId":"05614410360298600579"}}},"execution_count":null,"outputs":[]}]}